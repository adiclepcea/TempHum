
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001052  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  00001052  000010e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000063  00800074  00800074  000010fa  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  000010fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000033a  00000000  00000000  0000115a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000010e9  00000000  00000000  00001494  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000547  00000000  00000000  0000257d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000fa5  00000000  00000000  00002ac4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000270  00000000  00000000  00003a6c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a6  00000000  00000000  00003cdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000048f  00000000  00000000  00004082  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000120  00000000  00000000  00004511  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
       2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
       4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
       6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
       8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
       a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
       c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
       e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
      10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
      12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
      14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
      16:	32 c0       	rjmp	.+100    	; 0x7c <__vector_11>
      18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
      1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
      1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
      1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
      20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
      22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
      24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
      26:	11 24       	eor	r1, r1
      28:	1f be       	out	0x3f, r1	; 63
      2a:	cf e5       	ldi	r28, 0x5F	; 95
      2c:	d4 e0       	ldi	r29, 0x04	; 4
      2e:	de bf       	out	0x3e, r29	; 62
      30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
      32:	10 e0       	ldi	r17, 0x00	; 0
      34:	a0 e6       	ldi	r26, 0x60	; 96
      36:	b0 e0       	ldi	r27, 0x00	; 0
      38:	e2 e5       	ldi	r30, 0x52	; 82
      3a:	f0 e1       	ldi	r31, 0x10	; 16
      3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
      3e:	05 90       	lpm	r0, Z+
      40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
      42:	a4 37       	cpi	r26, 0x74	; 116
      44:	b1 07       	cpc	r27, r17
      46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
      48:	10 e0       	ldi	r17, 0x00	; 0
      4a:	a4 e7       	ldi	r26, 0x74	; 116
      4c:	b0 e0       	ldi	r27, 0x00	; 0
      4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
      50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
      52:	a7 3d       	cpi	r26, 0xD7	; 215
      54:	b1 07       	cpc	r27, r17
      56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
      58:	9f d3       	rcall	.+1854   	; 0x798 <main>
      5a:	f9 c7       	rjmp	.+4082   	; 0x104e <_exit>

0000005c <__bad_interrupt>:
      5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <USARTInit>:
#include "usart.h"

void USARTInit(uint16_t ubrrvalue)
{
	//Setup q
	UQFront=UQEnd=-1;
      5e:	2f ef       	ldi	r18, 0xFF	; 255
      60:	20 93 96 00 	sts	0x0096, r18
      64:	20 91 96 00 	lds	r18, 0x0096
      68:	20 93 95 00 	sts	0x0095, r18

	//Set Baud rate
	UBRRH=(unsigned char)(ubrrvalue>>8);
      6c:	90 bd       	out	0x20, r25	; 32
	UBRRL=(unsigned char)ubrrvalue;
      6e:	89 b9       	out	0x09, r24	; 9
	1 StopBit
	char size 8

	*/

	UCSRC=(1<<URSEL)|(3<<UCSZ0);
      70:	86 e8       	ldi	r24, 0x86	; 134
      72:	80 bd       	out	0x20, r24	; 32

	Enable The recevier and transmitter

	*/

	UCSRB=(1<<RXCIE)|(1<<RXEN)|(1<<TXEN);
      74:	88 e9       	ldi	r24, 0x98	; 152
      76:	8a b9       	out	0x0a, r24	; 10
	sei();
      78:	78 94       	sei

}
      7a:	08 95       	ret

0000007c <__vector_11>:

//The USART ISR
ISR(USART_RXC_VECT)
{
      7c:	1f 92       	push	r1
      7e:	0f 92       	push	r0
      80:	0f b6       	in	r0, 0x3f	; 63
      82:	0f 92       	push	r0
      84:	11 24       	eor	r1, r1
      86:	2f 93       	push	r18
      88:	3f 93       	push	r19
      8a:	4f 93       	push	r20
      8c:	8f 93       	push	r24
      8e:	9f 93       	push	r25
      90:	ef 93       	push	r30
      92:	ff 93       	push	r31
	//Read the data
	char data=UDR;
      94:	4c b1       	in	r20, 0x0c	; 12

	//Now add it to q

	if(((UQEnd==RECEIVE_BUFF_SIZE-1) && UQFront==0) || ((UQEnd+1)==UQFront))
      96:	80 91 96 00 	lds	r24, 0x0096
      9a:	8f 33       	cpi	r24, 0x3F	; 63
      9c:	21 f4       	brne	.+8      	; 0xa6 <__vector_11+0x2a>
      9e:	80 91 95 00 	lds	r24, 0x0095
      a2:	88 23       	and	r24, r24
      a4:	71 f0       	breq	.+28     	; 0xc2 <__vector_11+0x46>
      a6:	80 91 96 00 	lds	r24, 0x0096
      aa:	20 91 95 00 	lds	r18, 0x0095
      ae:	99 27       	eor	r25, r25
      b0:	87 fd       	sbrc	r24, 7
      b2:	90 95       	com	r25
      b4:	01 96       	adiw	r24, 0x01	; 1
      b6:	33 27       	eor	r19, r19
      b8:	27 fd       	sbrc	r18, 7
      ba:	30 95       	com	r19
      bc:	82 17       	cp	r24, r18
      be:	93 07       	cpc	r25, r19
      c0:	59 f4       	brne	.+22     	; 0xd8 <__vector_11+0x5c>
	{
		//Q Full
		UQFront++;
      c2:	80 91 95 00 	lds	r24, 0x0095
      c6:	8f 5f       	subi	r24, 0xFF	; 255
      c8:	80 93 95 00 	sts	0x0095, r24
		if(UQFront==RECEIVE_BUFF_SIZE) UQFront=0;
      cc:	80 91 95 00 	lds	r24, 0x0095
      d0:	80 34       	cpi	r24, 0x40	; 64
      d2:	11 f4       	brne	.+4      	; 0xd8 <__vector_11+0x5c>
      d4:	10 92 95 00 	sts	0x0095, r1
	}
	

	if(UQEnd==RECEIVE_BUFF_SIZE-1)
      d8:	80 91 96 00 	lds	r24, 0x0096
      dc:	8f 33       	cpi	r24, 0x3F	; 63
      de:	19 f4       	brne	.+6      	; 0xe6 <__vector_11+0x6a>
		UQEnd=0;
      e0:	10 92 96 00 	sts	0x0096, r1
      e4:	05 c0       	rjmp	.+10     	; 0xf0 <__vector_11+0x74>
	else
		UQEnd++;
      e6:	80 91 96 00 	lds	r24, 0x0096
      ea:	8f 5f       	subi	r24, 0xFF	; 255
      ec:	80 93 96 00 	sts	0x0096, r24


	URBuff[UQEnd]=data;
      f0:	e0 91 96 00 	lds	r30, 0x0096
      f4:	ff 27       	eor	r31, r31
      f6:	e7 fd       	sbrc	r30, 7
      f8:	f0 95       	com	r31
      fa:	e9 56       	subi	r30, 0x69	; 105
      fc:	ff 4f       	sbci	r31, 0xFF	; 255
      fe:	40 83       	st	Z, r20

	if(UQFront==-1) UQFront=0;
     100:	80 91 95 00 	lds	r24, 0x0095
     104:	8f 3f       	cpi	r24, 0xFF	; 255
     106:	11 f4       	brne	.+4      	; 0x10c <__vector_11+0x90>
     108:	10 92 95 00 	sts	0x0095, r1

}
     10c:	ff 91       	pop	r31
     10e:	ef 91       	pop	r30
     110:	9f 91       	pop	r25
     112:	8f 91       	pop	r24
     114:	4f 91       	pop	r20
     116:	3f 91       	pop	r19
     118:	2f 91       	pop	r18
     11a:	0f 90       	pop	r0
     11c:	0f be       	out	0x3f, r0	; 63
     11e:	0f 90       	pop	r0
     120:	1f 90       	pop	r1
     122:	18 95       	reti

00000124 <UReadData>:
char UReadData()
{
	char data;
	
	//Check if q is empty
	if(UQFront==-1)
     124:	80 91 95 00 	lds	r24, 0x0095
     128:	8f 3f       	cpi	r24, 0xFF	; 255
     12a:	11 f4       	brne	.+4      	; 0x130 <UReadData+0xc>
     12c:	e0 e0       	ldi	r30, 0x00	; 0
     12e:	21 c0       	rjmp	.+66     	; 0x172 <UReadData+0x4e>
		return 0;
	
	data=URBuff[UQFront];
     130:	e0 91 95 00 	lds	r30, 0x0095
     134:	ff 27       	eor	r31, r31
     136:	e7 fd       	sbrc	r30, 7
     138:	f0 95       	com	r31
     13a:	e9 56       	subi	r30, 0x69	; 105
     13c:	ff 4f       	sbci	r31, 0xFF	; 255
     13e:	e0 81       	ld	r30, Z
	
	if(UQFront==UQEnd)
     140:	90 91 95 00 	lds	r25, 0x0095
     144:	80 91 96 00 	lds	r24, 0x0096
     148:	98 17       	cp	r25, r24
     14a:	41 f4       	brne	.+16     	; 0x15c <UReadData+0x38>
	{
	//If single data is left
	//So empty q
	UQFront=UQEnd=-1;
     14c:	8f ef       	ldi	r24, 0xFF	; 255
     14e:	80 93 96 00 	sts	0x0096, r24
     152:	80 91 96 00 	lds	r24, 0x0096
     156:	80 93 95 00 	sts	0x0095, r24
     15a:	0b c0       	rjmp	.+22     	; 0x172 <UReadData+0x4e>
	}
	else
	{
		UQFront++;
     15c:	80 91 95 00 	lds	r24, 0x0095
     160:	8f 5f       	subi	r24, 0xFF	; 255
     162:	80 93 95 00 	sts	0x0095, r24

		if(UQFront==RECEIVE_BUFF_SIZE)
     166:	80 91 95 00 	lds	r24, 0x0095
     16a:	80 34       	cpi	r24, 0x40	; 64
     16c:	11 f4       	brne	.+4      	; 0x172 <UReadData+0x4e>
		UQFront=0;
     16e:	10 92 95 00 	sts	0x0095, r1
	}

	return data;
}
     172:	8e 2f       	mov	r24, r30
     174:	08 95       	ret

00000176 <UWriteData>:

void UWriteData(const char data)
{
	//Wait For Transmitter to become ready
	while(!(UCSRA & (1<<UDRE)));
     176:	5d 9b       	sbis	0x0b, 5	; 11
     178:	fe cf       	rjmp	.-4      	; 0x176 <UWriteData>

	//Now write
	UDR=data;
     17a:	8c b9       	out	0x0c, r24	; 12
}
     17c:	08 95       	ret

0000017e <UDataAvailable>:

uint8_t UDataAvailable()
{
	if(UQFront==-1) return 0;
     17e:	80 91 95 00 	lds	r24, 0x0095
     182:	8f 3f       	cpi	r24, 0xFF	; 255
     184:	11 f4       	brne	.+4      	; 0x18a <UDataAvailable+0xc>
     186:	90 e0       	ldi	r25, 0x00	; 0
     188:	1a c0       	rjmp	.+52     	; 0x1be <UDataAvailable+0x40>
	if(UQFront<UQEnd)
     18a:	90 91 95 00 	lds	r25, 0x0095
     18e:	80 91 96 00 	lds	r24, 0x0096
     192:	98 17       	cp	r25, r24
     194:	34 f4       	brge	.+12     	; 0x1a2 <UDataAvailable+0x24>
		return(UQEnd-UQFront+1);
     196:	90 91 96 00 	lds	r25, 0x0096
     19a:	80 91 95 00 	lds	r24, 0x0095
     19e:	9f 5f       	subi	r25, 0xFF	; 255
     1a0:	0d c0       	rjmp	.+26     	; 0x1bc <UDataAvailable+0x3e>
	else if(UQFront>UQEnd)
     1a2:	90 91 95 00 	lds	r25, 0x0095
     1a6:	80 91 96 00 	lds	r24, 0x0096
     1aa:	89 17       	cp	r24, r25
     1ac:	14 f0       	brlt	.+4      	; 0x1b2 <UDataAvailable+0x34>
     1ae:	91 e0       	ldi	r25, 0x01	; 1
     1b0:	06 c0       	rjmp	.+12     	; 0x1be <UDataAvailable+0x40>
		return (RECEIVE_BUFF_SIZE-UQFront+UQEnd+1);
     1b2:	90 91 96 00 	lds	r25, 0x0096
     1b6:	80 91 95 00 	lds	r24, 0x0095
     1ba:	9f 5b       	subi	r25, 0xBF	; 191
     1bc:	98 1b       	sub	r25, r24
	else
		return 1;
}
     1be:	89 2f       	mov	r24, r25
     1c0:	08 95       	ret

000001c2 <UWriteString>:

void UWriteString(const char *str)
{
     1c2:	fc 01       	movw	r30, r24
     1c4:	04 c0       	rjmp	.+8      	; 0x1ce <UWriteString+0xc>
}

void UWriteData(const char data)
{
	//Wait For Transmitter to become ready
	while(!(UCSRA & (1<<UDRE)));
     1c6:	5d 9b       	sbis	0x0b, 5	; 11
     1c8:	fe cf       	rjmp	.-4      	; 0x1c6 <UWriteString+0x4>

	//Now write
	UDR=data;
     1ca:	8c b9       	out	0x0c, r24	; 12
void UWriteString(const char *str)
{
	while((*str)!='\0')
	{
		UWriteData(*str);
		str++;
     1cc:	31 96       	adiw	r30, 0x01	; 1
		return 1;
}

void UWriteString(const char *str)
{
	while((*str)!='\0')
     1ce:	80 81       	ld	r24, Z
     1d0:	88 23       	and	r24, r24
     1d2:	c9 f7       	brne	.-14     	; 0x1c6 <UWriteString+0x4>
	{
		UWriteData(*str);
		str++;
	}
}
     1d4:	08 95       	ret

000001d6 <UReadBuffer>:

void UReadBuffer(void *buff,uint16_t len)
{
     1d6:	ef 92       	push	r14
     1d8:	ff 92       	push	r15
     1da:	0f 93       	push	r16
     1dc:	1f 93       	push	r17
     1de:	cf 93       	push	r28
     1e0:	df 93       	push	r29
     1e2:	7c 01       	movw	r14, r24
     1e4:	8b 01       	movw	r16, r22
     1e6:	c0 e0       	ldi	r28, 0x00	; 0
     1e8:	d0 e0       	ldi	r29, 0x00	; 0
     1ea:	06 c0       	rjmp	.+12     	; 0x1f8 <UReadBuffer+0x22>
	uint16_t i;
	for(i=0;i<len;i++)
	{
		((char*)buff)[i]=UReadData();
     1ec:	9b df       	rcall	.-202    	; 0x124 <UReadData>
     1ee:	f7 01       	movw	r30, r14
     1f0:	ec 0f       	add	r30, r28
     1f2:	fd 1f       	adc	r31, r29
     1f4:	80 83       	st	Z, r24
}

void UReadBuffer(void *buff,uint16_t len)
{
	uint16_t i;
	for(i=0;i<len;i++)
     1f6:	21 96       	adiw	r28, 0x01	; 1
     1f8:	c0 17       	cp	r28, r16
     1fa:	d1 07       	cpc	r29, r17
     1fc:	b8 f3       	brcs	.-18     	; 0x1ec <UReadBuffer+0x16>
	{
		((char*)buff)[i]=UReadData();
	}
}
     1fe:	df 91       	pop	r29
     200:	cf 91       	pop	r28
     202:	1f 91       	pop	r17
     204:	0f 91       	pop	r16
     206:	ff 90       	pop	r15
     208:	ef 90       	pop	r14
     20a:	08 95       	ret

0000020c <UFlushBuffer>:
void UFlushBuffer()
{
     20c:	01 c0       	rjmp	.+2      	; 0x210 <UFlushBuffer+0x4>
	while(UDataAvailable()>0)
	{
		UReadData();
     20e:	8a df       	rcall	.-236    	; 0x124 <UReadData>
		((char*)buff)[i]=UReadData();
	}
}
void UFlushBuffer()
{
	while(UDataAvailable()>0)
     210:	b6 df       	rcall	.-148    	; 0x17e <UDataAvailable>
     212:	88 23       	and	r24, r24
     214:	e1 f7       	brne	.-8      	; 0x20e <UFlushBuffer+0x2>
	{
		UReadData();
	}
}
     216:	08 95       	ret

00000218 <CRC16>:

void readTempHum(void);

//calcularea CRC pentru modbus
unsigned int CRC16(unsigned char *buf, int len)
{  
     218:	0f 93       	push	r16
     21a:	1f 93       	push	r17
     21c:	cf 93       	push	r28
     21e:	df 93       	push	r29
     220:	ec 01       	movw	r28, r24
     222:	2f ef       	ldi	r18, 0xFF	; 255
     224:	3f ef       	ldi	r19, 0xFF	; 255
     226:	a0 e0       	ldi	r26, 0x00	; 0
     228:	b0 e0       	ldi	r27, 0x00	; 0
  crc ^= (unsigned int)buf[pos];    // XOR byte into least sig. byte of crc

  for (int i = 8; i != 0; i--) {    // Loop over each bit
    if ((crc & 0x0001) != 0) {      // If the LSB is set
      crc >>= 1;                    // Shift right and XOR 0xA001
      crc ^= 0xA001;
     22a:	01 e0       	ldi	r16, 0x01	; 1
     22c:	10 ea       	ldi	r17, 0xA0	; 160
     22e:	16 c0       	rjmp	.+44     	; 0x25c <CRC16+0x44>
unsigned int CRC16(unsigned char *buf, int len)
{  
  unsigned int crc = 0xFFFF;
  for (int pos = 0; pos < len; pos++)
  {
  crc ^= (unsigned int)buf[pos];    // XOR byte into least sig. byte of crc
     230:	fe 01       	movw	r30, r28
     232:	ea 0f       	add	r30, r26
     234:	fb 1f       	adc	r31, r27
     236:	80 81       	ld	r24, Z
     238:	90 e0       	ldi	r25, 0x00	; 0
     23a:	28 27       	eor	r18, r24
     23c:	39 27       	eor	r19, r25
     23e:	88 e0       	ldi	r24, 0x08	; 8
     240:	90 e0       	ldi	r25, 0x00	; 0
     242:	a9 01       	movw	r20, r18
     244:	56 95       	lsr	r21
     246:	47 95       	ror	r20

  for (int i = 8; i != 0; i--) {    // Loop over each bit
    if ((crc & 0x0001) != 0) {      // If the LSB is set
     248:	20 ff       	sbrs	r18, 0
     24a:	04 c0       	rjmp	.+8      	; 0x254 <CRC16+0x3c>
      crc >>= 1;                    // Shift right and XOR 0xA001
      crc ^= 0xA001;
     24c:	9a 01       	movw	r18, r20
     24e:	20 27       	eor	r18, r16
     250:	31 27       	eor	r19, r17
     252:	01 c0       	rjmp	.+2      	; 0x256 <CRC16+0x3e>
    }
    else                            // Else LSB is not set
      crc >>= 1;                    // Just shift right
     254:	9a 01       	movw	r18, r20
  unsigned int crc = 0xFFFF;
  for (int pos = 0; pos < len; pos++)
  {
  crc ^= (unsigned int)buf[pos];    // XOR byte into least sig. byte of crc

  for (int i = 8; i != 0; i--) {    // Loop over each bit
     256:	01 97       	sbiw	r24, 0x01	; 1
     258:	a1 f7       	brne	.-24     	; 0x242 <CRC16+0x2a>

//calcularea CRC pentru modbus
unsigned int CRC16(unsigned char *buf, int len)
{  
  unsigned int crc = 0xFFFF;
  for (int pos = 0; pos < len; pos++)
     25a:	11 96       	adiw	r26, 0x01	; 1
     25c:	a6 17       	cp	r26, r22
     25e:	b7 07       	cpc	r27, r23
     260:	3c f3       	brlt	.-50     	; 0x230 <CRC16+0x18>
      crc >>= 1;                    // Just shift right
    }
  }

  return crc;
}
     262:	c9 01       	movw	r24, r18
     264:	df 91       	pop	r29
     266:	cf 91       	pop	r28
     268:	1f 91       	pop	r17
     26a:	0f 91       	pop	r16
     26c:	08 95       	ret

0000026e <respondAddressError>:

//raspundem cu eroare de adresa la modbus
void respondAddressError(void){
   rasp_g[1]=0x84; //function response in error
     26e:	84 e8       	ldi	r24, 0x84	; 132
     270:	80 93 82 00 	sts	0x0082, r24
   rasp_g[3]=0x02; //illegal data address
     274:	82 e0       	ldi	r24, 0x02	; 2
     276:	80 93 84 00 	sts	0x0084, r24
   unsigned int rez = CRC16(rasp_g,3);
     27a:	81 e8       	ldi	r24, 0x81	; 129
     27c:	90 e0       	ldi	r25, 0x00	; 0
     27e:	63 e0       	ldi	r22, 0x03	; 3
     280:	70 e0       	ldi	r23, 0x00	; 0
     282:	ca df       	rcall	.-108    	; 0x218 <CRC16>
   rasp_g[4]=rez & 0xFF;;
     284:	80 93 85 00 	sts	0x0085, r24
   rez>>=8;
   rasp_g[5]=rez;
     288:	90 93 86 00 	sts	0x0086, r25
     28c:	e1 e8       	ldi	r30, 0x81	; 129
     28e:	f0 e0       	ldi	r31, 0x00	; 0
   for(uint8_t i=0;i<6;i++){
     UWriteData(rasp_g[i]);
     290:	80 81       	ld	r24, Z
}

void UWriteData(const char data)
{
	//Wait For Transmitter to become ready
	while(!(UCSRA & (1<<UDRE)));
     292:	5d 9b       	sbis	0x0b, 5	; 11
     294:	fe cf       	rjmp	.-4      	; 0x292 <respondAddressError+0x24>

	//Now write
	UDR=data;
     296:	8c b9       	out	0x0c, r24	; 12
     298:	31 96       	adiw	r30, 0x01	; 1
   rasp_g[3]=0x02; //illegal data address
   unsigned int rez = CRC16(rasp_g,3);
   rasp_g[4]=rez & 0xFF;;
   rez>>=8;
   rasp_g[5]=rez;
   for(uint8_t i=0;i<6;i++){
     29a:	80 e0       	ldi	r24, 0x00	; 0
     29c:	e7 38       	cpi	r30, 0x87	; 135
     29e:	f8 07       	cpc	r31, r24
     2a0:	b9 f7       	brne	.-18     	; 0x290 <respondAddressError+0x22>
     UWriteData(rasp_g[i]);
   } 
}
     2a2:	08 95       	ret

000002a4 <respondFunctionError>:


//raspundem cu eroare de functie la modbus
void respondFunctionError(unsigned char inputFunction){
   rasp_g[1]=128+inputFunction; //function response in error
     2a4:	80 58       	subi	r24, 0x80	; 128
     2a6:	80 93 82 00 	sts	0x0082, r24
   rasp_g[3]=0x01; //illegal function
     2aa:	81 e0       	ldi	r24, 0x01	; 1
     2ac:	80 93 84 00 	sts	0x0084, r24
   unsigned int rez = CRC16(rasp_g,3);
     2b0:	81 e8       	ldi	r24, 0x81	; 129
     2b2:	90 e0       	ldi	r25, 0x00	; 0
     2b4:	63 e0       	ldi	r22, 0x03	; 3
     2b6:	70 e0       	ldi	r23, 0x00	; 0
     2b8:	af df       	rcall	.-162    	; 0x218 <CRC16>
   rasp_g[4]=rez & 0xFF;;
     2ba:	80 93 85 00 	sts	0x0085, r24
   rez>>=8;
   rasp_g[5]=rez;
     2be:	90 93 86 00 	sts	0x0086, r25
     2c2:	e1 e8       	ldi	r30, 0x81	; 129
     2c4:	f0 e0       	ldi	r31, 0x00	; 0
   for(uint8_t i=0;i<6;i++){
     UWriteData(rasp_g[i]);
     2c6:	80 81       	ld	r24, Z
}

void UWriteData(const char data)
{
	//Wait For Transmitter to become ready
	while(!(UCSRA & (1<<UDRE)));
     2c8:	5d 9b       	sbis	0x0b, 5	; 11
     2ca:	fe cf       	rjmp	.-4      	; 0x2c8 <respondFunctionError+0x24>

	//Now write
	UDR=data;
     2cc:	8c b9       	out	0x0c, r24	; 12
     2ce:	31 96       	adiw	r30, 0x01	; 1
   rasp_g[3]=0x01; //illegal function
   unsigned int rez = CRC16(rasp_g,3);
   rasp_g[4]=rez & 0xFF;;
   rez>>=8;
   rasp_g[5]=rez;
   for(uint8_t i=0;i<6;i++){
     2d0:	80 e0       	ldi	r24, 0x00	; 0
     2d2:	e7 38       	cpi	r30, 0x87	; 135
     2d4:	f8 07       	cpc	r31, r24
     2d6:	b9 f7       	brne	.-18     	; 0x2c6 <respondFunctionError+0x22>
     UWriteData(rasp_g[i]);
   }
}
     2d8:	08 95       	ret

000002da <listen485>:
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     2da:	80 e4       	ldi	r24, 0x40	; 64
     2dc:	9c e9       	ldi	r25, 0x9C	; 156
     2de:	01 97       	sbiw	r24, 0x01	; 1
     2e0:	f1 f7       	brne	.-4      	; 0x2de <listen485+0x4>
	eeprom_write_byte((uint8_t*)12,umid_max);
}

void listen485(void){ //spunem la chipul 485 ca ascultam
 	_delay_ms(10);
	PORTC&=~(1<<PINC3);	
     2e2:	ab 98       	cbi	0x15, 3	; 21
}
     2e4:	08 95       	ret

000002e6 <clearBuffer>:
         UWriteData(rasp[i]);
      } 
	  listen485();
}

void clearBuffer(char *buffer){
     2e6:	20 e0       	ldi	r18, 0x00	; 0
     2e8:	30 e0       	ldi	r19, 0x00	; 0
	for(int i=0;i<10;i++){
		buffer[i]='\0';
     2ea:	fc 01       	movw	r30, r24
     2ec:	e2 0f       	add	r30, r18
     2ee:	f3 1f       	adc	r31, r19
     2f0:	10 82       	st	Z, r1
      } 
	  listen485();
}

void clearBuffer(char *buffer){
	for(int i=0;i<10;i++){
     2f2:	2f 5f       	subi	r18, 0xFF	; 255
     2f4:	3f 4f       	sbci	r19, 0xFF	; 255
     2f6:	2a 30       	cpi	r18, 0x0A	; 10
     2f8:	31 05       	cpc	r19, r1
     2fa:	b9 f7       	brne	.-18     	; 0x2ea <clearBuffer+0x4>
		buffer[i]='\0';
	}
}
     2fc:	08 95       	ret

000002fe <readTempHum>:

void readTempHum(void){
     2fe:	2f 92       	push	r2
     300:	3f 92       	push	r3
     302:	4f 92       	push	r4
     304:	5f 92       	push	r5
     306:	6f 92       	push	r6
     308:	7f 92       	push	r7
     30a:	8f 92       	push	r8
     30c:	9f 92       	push	r9
     30e:	af 92       	push	r10
     310:	bf 92       	push	r11
     312:	ef 92       	push	r14
     314:	ff 92       	push	r15
     316:	0f 93       	push	r16
     318:	1f 93       	push	r17
     31a:	df 93       	push	r29
     31c:	cf 93       	push	r28
     31e:	cd b7       	in	r28, 0x3d	; 61
     320:	de b7       	in	r29, 0x3e	; 62
     322:	66 97       	sbiw	r28, 0x16	; 22
     324:	0f b6       	in	r0, 0x3f	; 63
     326:	f8 94       	cli
     328:	de bf       	out	0x3e, r29	; 62
     32a:	0f be       	out	0x3f, r0	; 63
     32c:	cd bf       	out	0x3d, r28	; 61
     32e:	9e 01       	movw	r18, r28
     330:	2b 5f       	subi	r18, 0xFB	; 251
     332:	3f 4f       	sbci	r19, 0xFF	; 255
     334:	38 8b       	std	Y+16, r19	; 0x10
     336:	2f 87       	std	Y+15, r18	; 0x0f
     338:	f9 01       	movw	r30, r18
	  listen485();
}

void clearBuffer(char *buffer){
	for(int i=0;i<10;i++){
		buffer[i]='\0';
     33a:	59 01       	movw	r10, r18
     33c:	ce 01       	movw	r24, r28
     33e:	0f 96       	adiw	r24, 0x0f	; 15
     340:	9e 8b       	std	Y+22, r25	; 0x16
     342:	8d 8b       	std	Y+21, r24	; 0x15
     344:	11 92       	st	Z+, r1
      } 
	  listen485();
}

void clearBuffer(char *buffer){
	for(int i=0;i<10;i++){
     346:	2d 89       	ldd	r18, Y+21	; 0x15
     348:	3e 89       	ldd	r19, Y+22	; 0x16
     34a:	e2 17       	cp	r30, r18
     34c:	f3 07       	cpc	r31, r19
     34e:	d1 f7       	brne	.-12     	; 0x344 <readTempHum+0x46>
	char buffer[10];
	char buffer2[4];
	
	clearBuffer(buffer);
	
	strcpy(buffer,"ERR");
     350:	c5 01       	movw	r24, r10
     352:	60 e6       	ldi	r22, 0x60	; 96
     354:	70 e0       	ldi	r23, 0x00	; 0
     356:	16 d6       	rcall	.+3116   	; 0xf84 <strcpy>
	temp_c = readTemp();
     358:	e4 d3       	rcall	.+1992   	; 0xb22 <readTemp>
     35a:	7b 01       	movw	r14, r22
     35c:	8c 01       	movw	r16, r24
	humidity = readHum();
     35e:	f3 d3       	rcall	.+2022   	; 0xb46 <readHum>
     360:	69 8b       	std	Y+17, r22	; 0x11
     362:	7a 8b       	std	Y+18, r23	; 0x12
     364:	8b 8b       	std	Y+19, r24	; 0x13
     366:	9c 8b       	std	Y+20, r25	; 0x14
	temp_u = (int)temp_c;
     368:	c8 01       	movw	r24, r16
     36a:	b7 01       	movw	r22, r14
     36c:	b7 d4       	rcall	.+2414   	; 0xcdc <__fixsfsi>
     36e:	1b 01       	movw	r2, r22
     370:	2c 01       	movw	r4, r24
     372:	70 93 75 00 	sts	0x0075, r23
     376:	60 93 74 00 	sts	0x0074, r22
	temp_d = ((int)(temp_c*100) % (temp_u*100))/10;
     37a:	c8 01       	movw	r24, r16
     37c:	b7 01       	movw	r22, r14
     37e:	20 e0       	ldi	r18, 0x00	; 0
     380:	30 e0       	ldi	r19, 0x00	; 0
     382:	48 ec       	ldi	r20, 0xC8	; 200
     384:	52 e4       	ldi	r21, 0x42	; 66
     386:	69 d5       	rcall	.+2770   	; 0xe5a <__mulsf3>
     388:	a9 d4       	rcall	.+2386   	; 0xcdc <__fixsfsi>
     38a:	dc 01       	movw	r26, r24
     38c:	cb 01       	movw	r24, r22
     38e:	44 e6       	ldi	r20, 0x64	; 100
     390:	e4 2e       	mov	r14, r20
     392:	f1 2c       	mov	r15, r1
     394:	2e 9c       	mul	r2, r14
     396:	b0 01       	movw	r22, r0
     398:	2f 9c       	mul	r2, r15
     39a:	70 0d       	add	r23, r0
     39c:	3e 9c       	mul	r3, r14
     39e:	70 0d       	add	r23, r0
     3a0:	11 24       	eor	r1, r1
     3a2:	be d5       	rcall	.+2940   	; 0xf20 <__divmodhi4>
     3a4:	6a e0       	ldi	r22, 0x0A	; 10
     3a6:	70 e0       	ldi	r23, 0x00	; 0
     3a8:	bb d5       	rcall	.+2934   	; 0xf20 <__divmodhi4>
     3aa:	70 93 77 00 	sts	0x0077, r23
     3ae:	60 93 76 00 	sts	0x0076, r22
	hum_u = (int)humidity;
     3b2:	69 89       	ldd	r22, Y+17	; 0x11
     3b4:	7a 89       	ldd	r23, Y+18	; 0x12
     3b6:	8b 89       	ldd	r24, Y+19	; 0x13
     3b8:	9c 89       	ldd	r25, Y+20	; 0x14
     3ba:	90 d4       	rcall	.+2336   	; 0xcdc <__fixsfsi>
     3bc:	3b 01       	movw	r6, r22
     3be:	4c 01       	movw	r8, r24
     3c0:	70 93 79 00 	sts	0x0079, r23
     3c4:	60 93 78 00 	sts	0x0078, r22
	hum_d = ((int)(humidity*100) % (hum_u*100))/10;
     3c8:	69 89       	ldd	r22, Y+17	; 0x11
     3ca:	7a 89       	ldd	r23, Y+18	; 0x12
     3cc:	8b 89       	ldd	r24, Y+19	; 0x13
     3ce:	9c 89       	ldd	r25, Y+20	; 0x14
     3d0:	20 e0       	ldi	r18, 0x00	; 0
     3d2:	30 e0       	ldi	r19, 0x00	; 0
     3d4:	48 ec       	ldi	r20, 0xC8	; 200
     3d6:	52 e4       	ldi	r21, 0x42	; 66
     3d8:	40 d5       	rcall	.+2688   	; 0xe5a <__mulsf3>
     3da:	80 d4       	rcall	.+2304   	; 0xcdc <__fixsfsi>
     3dc:	dc 01       	movw	r26, r24
     3de:	cb 01       	movw	r24, r22
     3e0:	6e 9c       	mul	r6, r14
     3e2:	b0 01       	movw	r22, r0
     3e4:	6f 9c       	mul	r6, r15
     3e6:	70 0d       	add	r23, r0
     3e8:	7e 9c       	mul	r7, r14
     3ea:	70 0d       	add	r23, r0
     3ec:	11 24       	eor	r1, r1
     3ee:	98 d5       	rcall	.+2864   	; 0xf20 <__divmodhi4>
     3f0:	6a e0       	ldi	r22, 0x0A	; 10
     3f2:	70 e0       	ldi	r23, 0x00	; 0
     3f4:	95 d5       	rcall	.+2858   	; 0xf20 <__divmodhi4>
     3f6:	70 93 7b 00 	sts	0x007B, r23
     3fa:	60 93 7a 00 	sts	0x007A, r22
	if(readParameter=='C'){
     3fe:	80 91 70 00 	lds	r24, 0x0070
     402:	8e 01       	movw	r16, r28
     404:	0f 5f       	subi	r16, 0xFF	; 255
     406:	1f 4f       	sbci	r17, 0xFF	; 255
     408:	83 34       	cpi	r24, 0x43	; 67
     40a:	51 f4       	brne	.+20     	; 0x420 <readTempHum+0x122>
		itoa((int)(temp_u),buffer,10);
     40c:	c1 01       	movw	r24, r2
     40e:	b5 01       	movw	r22, r10
     410:	4a e0       	ldi	r20, 0x0A	; 10
     412:	50 e0       	ldi	r21, 0x00	; 0
     414:	d8 d5       	rcall	.+2992   	; 0xfc6 <itoa>
		itoa((int)(temp_d),buffer2,10);
     416:	80 91 76 00 	lds	r24, 0x0076
     41a:	90 91 77 00 	lds	r25, 0x0077
     41e:	09 c0       	rjmp	.+18     	; 0x432 <readTempHum+0x134>
		strcat(buffer,".");
		strcat(buffer,buffer2);
	}else{
		itoa((int)(hum_u),buffer,10);
     420:	c3 01       	movw	r24, r6
     422:	b5 01       	movw	r22, r10
     424:	4a e0       	ldi	r20, 0x0A	; 10
     426:	50 e0       	ldi	r21, 0x00	; 0
     428:	ce d5       	rcall	.+2972   	; 0xfc6 <itoa>
		itoa((int)(hum_d),buffer2,10);
     42a:	80 91 7a 00 	lds	r24, 0x007A
     42e:	90 91 7b 00 	lds	r25, 0x007B
     432:	b8 01       	movw	r22, r16
     434:	4a e0       	ldi	r20, 0x0A	; 10
     436:	50 e0       	ldi	r21, 0x00	; 0
     438:	c6 d5       	rcall	.+2956   	; 0xfc6 <itoa>
		strcat(buffer,".");
     43a:	c5 01       	movw	r24, r10
     43c:	64 e6       	ldi	r22, 0x64	; 100
     43e:	70 e0       	ldi	r23, 0x00	; 0
     440:	96 d5       	rcall	.+2860   	; 0xf6e <strcat>
		strcat(buffer,buffer2);
     442:	c5 01       	movw	r24, r10
     444:	b8 01       	movw	r22, r16
     446:	93 d5       	rcall	.+2854   	; 0xf6e <strcat>
	}
	PORTB|=(1<<PINB2);
     448:	c2 9a       	sbi	0x18, 2	; 24
	
	I2CStart();
     44a:	68 d2       	rcall	.+1232   	; 0x91c <I2CStart>
	
	if(!I2C_IsBusy()){
     44c:	7b d2       	rcall	.+1270   	; 0x944 <I2C_IsBusy>
     44e:	88 23       	and	r24, r24
     450:	09 f0       	breq	.+2      	; 0x454 <readTempHum+0x156>
     452:	42 c0       	rjmp	.+132    	; 0x4d8 <__stack+0x79>
	
		count++;		
		uint8_t res=I2CWriteByte(0b00001000);
     454:	88 e0       	ldi	r24, 0x08	; 8
     456:	96 d2       	rcall	.+1324   	; 0x984 <I2CWriteByte>
			//UWriteString("\r\nNu am putut scrie la adresa mentionata");
			//PORTC &=~(1<<PINC3);
			//writeString(buffer);			
		}else{}
		//itoa(count,buffer,10);
		res=I2CWriteByte(readParameter);				
     458:	80 91 70 00 	lds	r24, 0x0070
     45c:	93 d2       	rcall	.+1318   	; 0x984 <I2CWriteByte>
		if(readParameter=='C' && strstr(buffer,"-42.")){
     45e:	80 91 70 00 	lds	r24, 0x0070
     462:	83 34       	cpi	r24, 0x43	; 67
     464:	e1 f4       	brne	.+56     	; 0x49e <__stack+0x3f>
     466:	8e 01       	movw	r16, r28
     468:	0b 5f       	subi	r16, 0xFB	; 251
     46a:	1f 4f       	sbci	r17, 0xFF	; 255
     46c:	c8 01       	movw	r24, r16
     46e:	66 e6       	ldi	r22, 0x66	; 102
     470:	70 e0       	ldi	r23, 0x00	; 0
     472:	8f d5       	rcall	.+2846   	; 0xf92 <strstr>
     474:	1d c0       	rjmp	.+58     	; 0x4b0 <__stack+0x51>
			strcpy(buffer,"ERR");
     476:	c8 01       	movw	r24, r16
     478:	60 e6       	ldi	r22, 0x60	; 96
     47a:	70 e0       	ldi	r23, 0x00	; 0
     47c:	83 d5       	rcall	.+2822   	; 0xf84 <strcpy>
		}else if(readParameter=='U' && strstr(buffer,"-13.")){
			strcpy(buffer,"ERR");
		}
		for(int i=0;i<4;i++){
			res=I2CWriteByte(buffer[i]);				
     47e:	8d 81       	ldd	r24, Y+5	; 0x05
     480:	81 d2       	rcall	.+1282   	; 0x984 <I2CWriteByte>
     482:	8e 81       	ldd	r24, Y+6	; 0x06
     484:	7f d2       	rcall	.+1278   	; 0x984 <I2CWriteByte>
     486:	8f 81       	ldd	r24, Y+7	; 0x07
     488:	7d d2       	rcall	.+1274   	; 0x984 <I2CWriteByte>
     48a:	88 85       	ldd	r24, Y+8	; 0x08
     48c:	7b d2       	rcall	.+1270   	; 0x984 <I2CWriteByte>
		}
		buffer[5]='\0';
     48e:	1a 86       	std	Y+10, r1	; 0x0a
		res=I2CWriteByte('\0');
     490:	80 e0       	ldi	r24, 0x00	; 0
     492:	78 d2       	rcall	.+1264   	; 0x984 <I2CWriteByte>
		//UWriteString(buffer);
		//UWriteString("\r\n\0");
		//_delay_ms(10);
		//PORTC &=~(1<<PINC3);
		
		if(readParameter=='C'){
     494:	80 91 70 00 	lds	r24, 0x0070
     498:	83 34       	cpi	r24, 0x43	; 67
     49a:	79 f4       	brne	.+30     	; 0x4ba <__stack+0x5b>
     49c:	0c c0       	rjmp	.+24     	; 0x4b6 <__stack+0x57>
		}else{}
		//itoa(count,buffer,10);
		res=I2CWriteByte(readParameter);				
		if(readParameter=='C' && strstr(buffer,"-42.")){
			strcpy(buffer,"ERR");
		}else if(readParameter=='U' && strstr(buffer,"-13.")){
     49e:	85 35       	cpi	r24, 0x55	; 85
     4a0:	71 f7       	brne	.-36     	; 0x47e <__stack+0x1f>
     4a2:	8e 01       	movw	r16, r28
     4a4:	0b 5f       	subi	r16, 0xFB	; 251
     4a6:	1f 4f       	sbci	r17, 0xFF	; 255
     4a8:	c8 01       	movw	r24, r16
     4aa:	6b e6       	ldi	r22, 0x6B	; 107
     4ac:	70 e0       	ldi	r23, 0x00	; 0
     4ae:	71 d5       	rcall	.+2786   	; 0xf92 <strstr>
     4b0:	00 97       	sbiw	r24, 0x00	; 0
     4b2:	09 f7       	brne	.-62     	; 0x476 <__stack+0x17>
     4b4:	e4 cf       	rjmp	.-56     	; 0x47e <__stack+0x1f>
		//UWriteString("\r\n\0");
		//_delay_ms(10);
		//PORTC &=~(1<<PINC3);
		
		if(readParameter=='C'){
			readParameter='U';
     4b6:	85 e5       	ldi	r24, 0x55	; 85
     4b8:	01 c0       	rjmp	.+2      	; 0x4bc <__stack+0x5d>
		}else{
			readParameter='C';
     4ba:	83 e4       	ldi	r24, 0x43	; 67
     4bc:	80 93 70 00 	sts	0x0070, r24
		}
		I2CStop();
     4c0:	4a d2       	rcall	.+1172   	; 0x956 <I2CStop>
	  listen485();
}

void clearBuffer(char *buffer){
	for(int i=0;i<10;i++){
		buffer[i]='\0';
     4c2:	ef 85       	ldd	r30, Y+15	; 0x0f
     4c4:	f8 89       	ldd	r31, Y+16	; 0x10
     4c6:	11 92       	st	Z+, r1
     4c8:	f8 8b       	std	Y+16, r31	; 0x10
     4ca:	ef 87       	std	Y+15, r30	; 0x0f
      } 
	  listen485();
}

void clearBuffer(char *buffer){
	for(int i=0;i<10;i++){
     4cc:	2d 89       	ldd	r18, Y+21	; 0x15
     4ce:	3e 89       	ldd	r19, Y+22	; 0x16
     4d0:	e2 17       	cp	r30, r18
     4d2:	f3 07       	cpc	r31, r19
     4d4:	b1 f7       	brne	.-20     	; 0x4c2 <__stack+0x63>
     4d6:	09 c0       	rjmp	.+18     	; 0x4ea <__stack+0x8b>
		I2CStop();
		
		clearBuffer(buffer);
		//I2CClose();
	}else{
		PORTC |=(1<<PINC3);
     4d8:	ab 9a       	sbi	0x15, 3	; 21
     4da:	80 e2       	ldi	r24, 0x20	; 32
     4dc:	9e e4       	ldi	r25, 0x4E	; 78
     4de:	fc 01       	movw	r30, r24
     4e0:	31 97       	sbiw	r30, 0x01	; 1
     4e2:	f1 f7       	brne	.-4      	; 0x4e0 <__stack+0x81>
		_delay_ms(5);
		//UWriteString("\r\nNu am putut scrie adresa");
		PORTC &=~(1<<PINC3);
     4e4:	ab 98       	cbi	0x15, 3	; 21
     4e6:	01 97       	sbiw	r24, 0x01	; 1
     4e8:	f1 f7       	brne	.-4      	; 0x4e6 <__stack+0x87>
		_delay_ms(5);
	}
	PORTB^=(1<<PINB2);
     4ea:	88 b3       	in	r24, 0x18	; 24
     4ec:	94 e0       	ldi	r25, 0x04	; 4
     4ee:	89 27       	eor	r24, r25
     4f0:	88 bb       	out	0x18, r24	; 24
}
     4f2:	66 96       	adiw	r28, 0x16	; 22
     4f4:	0f b6       	in	r0, 0x3f	; 63
     4f6:	f8 94       	cli
     4f8:	de bf       	out	0x3e, r29	; 62
     4fa:	0f be       	out	0x3f, r0	; 63
     4fc:	cd bf       	out	0x3d, r28	; 61
     4fe:	cf 91       	pop	r28
     500:	df 91       	pop	r29
     502:	1f 91       	pop	r17
     504:	0f 91       	pop	r16
     506:	ff 90       	pop	r15
     508:	ef 90       	pop	r14
     50a:	bf 90       	pop	r11
     50c:	af 90       	pop	r10
     50e:	9f 90       	pop	r9
     510:	8f 90       	pop	r8
     512:	7f 90       	pop	r7
     514:	6f 90       	pop	r6
     516:	5f 90       	pop	r5
     518:	4f 90       	pop	r4
     51a:	3f 90       	pop	r3
     51c:	2f 90       	pop	r2
     51e:	08 95       	ret

00000520 <writeUmidLimits>:
	eeprom_write_byte((uint8_t*)1,temp_min);
	eeprom_write_byte((uint8_t*)2,temp_max);
}

void writeUmidLimits(void){
	eeprom_write_byte((uint8_t*)11,umid_min);
     520:	8b e0       	ldi	r24, 0x0B	; 11
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	60 91 7e 00 	lds	r22, 0x007E
     528:	75 d5       	rcall	.+2794   	; 0x1014 <__eewr_byte_m8>
	eeprom_write_byte((uint8_t*)12,umid_max);
     52a:	8c e0       	ldi	r24, 0x0C	; 12
     52c:	90 e0       	ldi	r25, 0x00	; 0
     52e:	60 91 73 00 	lds	r22, 0x0073
     532:	70 d5       	rcall	.+2784   	; 0x1014 <__eewr_byte_m8>
}
     534:	08 95       	ret

00000536 <writeTempLimits>:
		umid_max=100;
	}
}

void writeTempLimits(void){
	eeprom_write_byte((uint8_t*)1,temp_min);
     536:	81 e0       	ldi	r24, 0x01	; 1
     538:	90 e0       	ldi	r25, 0x00	; 0
     53a:	60 91 71 00 	lds	r22, 0x0071
     53e:	6a d5       	rcall	.+2772   	; 0x1014 <__eewr_byte_m8>
	eeprom_write_byte((uint8_t*)2,temp_max);
     540:	82 e0       	ldi	r24, 0x02	; 2
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	60 91 72 00 	lds	r22, 0x0072
     548:	65 d5       	rcall	.+2762   	; 0x1014 <__eewr_byte_m8>
}
     54a:	08 95       	ret

0000054c <respondModbus>:
 	_delay_ms(10);
	PORTC&=~(1<<PINC3);	
}

//raspundem la modbus in functie de cerere
void respondModbus(unsigned char *buff){
     54c:	0f 93       	push	r16
     54e:	1f 93       	push	r17
     550:	cf 93       	push	r28
     552:	df 93       	push	r29
     554:	ec 01       	movw	r28, r24
   PORTC^=(1<<PINC3);
     556:	85 b3       	in	r24, 0x15	; 21
     558:	98 e0       	ldi	r25, 0x08	; 8
     55a:	89 27       	eor	r24, r25
     55c:	85 bb       	out	0x15, r24	; 21
     55e:	00 e4       	ldi	r16, 0x40	; 64
     560:	1c e9       	ldi	r17, 0x9C	; 156
     562:	c8 01       	movw	r24, r16
     564:	01 97       	sbiw	r24, 0x01	; 1
     566:	f1 f7       	brne	.-4      	; 0x564 <respondModbus+0x18>
   _delay_ms(10);
   uint8_t pos = 2;
	if(buff[0]!=ADDRESS){ //mesajul nu este pentru adresa noastra  
     568:	88 81       	ld	r24, Y
     56a:	85 30       	cpi	r24, 0x05	; 5
     56c:	09 f0       	breq	.+2      	; 0x570 <respondModbus+0x24>
     56e:	df c0       	rjmp	.+446    	; 0x72e <respondModbus+0x1e2>
		return; 
    }else if(buff[1]!=0x04){
     570:	49 81       	ldd	r20, Y+1	; 0x01
     572:	44 30       	cpi	r20, 0x04	; 4
     574:	09 f4       	brne	.+2      	; 0x578 <respondModbus+0x2c>
     576:	68 c0       	rjmp	.+208    	; 0x648 <respondModbus+0xfc>
		if(buff[1]==0x06){ //ni se cere sa setam limite
     578:	46 30       	cpi	r20, 0x06	; 6
     57a:	89 f5       	brne	.+98     	; 0x5de <respondModbus+0x92>
			if(buff[3]==0x01){//scriem temp 
     57c:	8b 81       	ldd	r24, Y+3	; 0x03
     57e:	81 30       	cpi	r24, 0x01	; 1
     580:	a9 f4       	brne	.+42     	; 0x5ac <respondModbus+0x60>
				temp_min = buff[4];
     582:	8c 81       	ldd	r24, Y+4	; 0x04
     584:	80 93 71 00 	sts	0x0071, r24
				temp_max= buff[5];
     588:	8d 81       	ldd	r24, Y+5	; 0x05
     58a:	80 93 72 00 	sts	0x0072, r24
				writeTempLimits();
     58e:	d3 df       	rcall	.-90     	; 0x536 <writeTempLimits>
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
				for(uint8_t i=0;i<8;i++){
					UWriteData(buff[i]);
     594:	fe 01       	movw	r30, r28
     596:	e8 0f       	add	r30, r24
     598:	f9 1f       	adc	r31, r25
     59a:	e0 81       	ld	r30, Z
}

void UWriteData(const char data)
{
	//Wait For Transmitter to become ready
	while(!(UCSRA & (1<<UDRE)));
     59c:	5d 9b       	sbis	0x0b, 5	; 11
     59e:	fe cf       	rjmp	.-4      	; 0x59c <respondModbus+0x50>

	//Now write
	UDR=data;
     5a0:	ec b9       	out	0x0c, r30	; 12
     5a2:	01 96       	adiw	r24, 0x01	; 1
		if(buff[1]==0x06){ //ni se cere sa setam limite
			if(buff[3]==0x01){//scriem temp 
				temp_min = buff[4];
				temp_max= buff[5];
				writeTempLimits();
				for(uint8_t i=0;i<8;i++){
     5a4:	88 30       	cpi	r24, 0x08	; 8
     5a6:	91 05       	cpc	r25, r1
     5a8:	a9 f7       	brne	.-22     	; 0x594 <respondModbus+0x48>
     5aa:	bc c0       	rjmp	.+376    	; 0x724 <respondModbus+0x1d8>
					UWriteData(buff[i]);
				}
				listen485();
				return;
			}else if(buff[3]==0x02){//scriem umiditatea
     5ac:	82 30       	cpi	r24, 0x02	; 2
     5ae:	a9 f4       	brne	.+42     	; 0x5da <respondModbus+0x8e>
				umid_min = buff[4];
     5b0:	8c 81       	ldd	r24, Y+4	; 0x04
     5b2:	80 93 7e 00 	sts	0x007E, r24
				umid_max= buff[5];
     5b6:	8d 81       	ldd	r24, Y+5	; 0x05
     5b8:	80 93 73 00 	sts	0x0073, r24
				writeUmidLimits();
     5bc:	b1 df       	rcall	.-158    	; 0x520 <writeUmidLimits>
     5be:	80 e0       	ldi	r24, 0x00	; 0
     5c0:	90 e0       	ldi	r25, 0x00	; 0
				for(uint8_t i=0;i<8;i++){
					UWriteData(buff[i]);
     5c2:	fe 01       	movw	r30, r28
     5c4:	e8 0f       	add	r30, r24
     5c6:	f9 1f       	adc	r31, r25
     5c8:	e0 81       	ld	r30, Z
}

void UWriteData(const char data)
{
	//Wait For Transmitter to become ready
	while(!(UCSRA & (1<<UDRE)));
     5ca:	5d 9b       	sbis	0x0b, 5	; 11
     5cc:	fe cf       	rjmp	.-4      	; 0x5ca <respondModbus+0x7e>

	//Now write
	UDR=data;
     5ce:	ec b9       	out	0x0c, r30	; 12
     5d0:	01 96       	adiw	r24, 0x01	; 1
				return;
			}else if(buff[3]==0x02){//scriem umiditatea
				umid_min = buff[4];
				umid_max= buff[5];
				writeUmidLimits();
				for(uint8_t i=0;i<8;i++){
     5d2:	88 30       	cpi	r24, 0x08	; 8
     5d4:	91 05       	cpc	r25, r1
     5d6:	a9 f7       	brne	.-22     	; 0x5c2 <respondModbus+0x76>
     5d8:	a5 c0       	rjmp	.+330    	; 0x724 <respondModbus+0x1d8>
					UWriteData(buff[i]);
				}
				listen485();
				return;
			}else{ //nu stim ce se doreste
				respondFunctionError(buff[1]);
     5da:	86 e0       	ldi	r24, 0x06	; 6
     5dc:	32 c0       	rjmp	.+100    	; 0x642 <respondModbus+0xf6>
				listen485();
				return;
			}
		}else if(buff[1]==0x03){//ni se cer valorile setate
     5de:	43 30       	cpi	r20, 0x03	; 3
     5e0:	79 f5       	brne	.+94     	; 0x640 <respondModbus+0xf4>
			//rasp[0]=ADDRESS;
			rasp[1]=0x03;
     5e2:	40 93 8c 00 	sts	0x008C, r20
			rasp[2]=0x02; //urmeaza 2 bytes
     5e6:	82 e0       	ldi	r24, 0x02	; 2
     5e8:	80 93 8d 00 	sts	0x008D, r24
			if(buff[3]==0x01){//temperatura
     5ec:	8b 81       	ldd	r24, Y+3	; 0x03
     5ee:	81 30       	cpi	r24, 0x01	; 1
     5f0:	39 f4       	brne	.+14     	; 0x600 <respondModbus+0xb4>
				rasp[3]=temp_min;
     5f2:	80 91 71 00 	lds	r24, 0x0071
     5f6:	80 93 8e 00 	sts	0x008E, r24
				rasp[4]=temp_max;
     5fa:	80 91 72 00 	lds	r24, 0x0072
     5fe:	06 c0       	rjmp	.+12     	; 0x60c <respondModbus+0xc0>
			}else{				//umiditatea
				rasp[3]=umid_min;
     600:	80 91 7e 00 	lds	r24, 0x007E
     604:	80 93 8e 00 	sts	0x008E, r24
				rasp[4]=umid_max;
     608:	80 91 73 00 	lds	r24, 0x0073
     60c:	80 93 8f 00 	sts	0x008F, r24
			}
			unsigned int crc=CRC16(rasp,5);
     610:	8b e8       	ldi	r24, 0x8B	; 139
     612:	90 e0       	ldi	r25, 0x00	; 0
     614:	65 e0       	ldi	r22, 0x05	; 5
     616:	70 e0       	ldi	r23, 0x00	; 0
     618:	ff dd       	rcall	.-1026   	; 0x218 <CRC16>
			rasp[5]=crc & 0xFF;
     61a:	80 93 90 00 	sts	0x0090, r24
			rasp[6]=crc>>8;
     61e:	90 93 91 00 	sts	0x0091, r25
     622:	eb e8       	ldi	r30, 0x8B	; 139
     624:	f0 e0       	ldi	r31, 0x00	; 0
			for(uint8_t i=0;i<7;i++){
				UWriteData(rasp[i]);	
     626:	80 81       	ld	r24, Z
}

void UWriteData(const char data)
{
	//Wait For Transmitter to become ready
	while(!(UCSRA & (1<<UDRE)));
     628:	5d 9b       	sbis	0x0b, 5	; 11
     62a:	fe cf       	rjmp	.-4      	; 0x628 <respondModbus+0xdc>

	//Now write
	UDR=data;
     62c:	8c b9       	out	0x0c, r24	; 12
     62e:	31 96       	adiw	r30, 0x01	; 1
				rasp[4]=umid_max;
			}
			unsigned int crc=CRC16(rasp,5);
			rasp[5]=crc & 0xFF;
			rasp[6]=crc>>8;
			for(uint8_t i=0;i<7;i++){
     630:	80 e0       	ldi	r24, 0x00	; 0
     632:	e2 39       	cpi	r30, 0x92	; 146
     634:	f8 07       	cpc	r31, r24
     636:	b9 f7       	brne	.-18     	; 0x626 <respondModbus+0xda>
				UWriteData(rasp[i]);	
			}
			rasp[1]=0x04;
     638:	84 e0       	ldi	r24, 0x04	; 4
     63a:	80 93 8c 00 	sts	0x008C, r24
     63e:	72 c0       	rjmp	.+228    	; 0x724 <respondModbus+0x1d8>
			listen485();
			return;
							
		}else{
			respondFunctionError(buff[1]);
     640:	84 2f       	mov	r24, r20
     642:	30 de       	rcall	.-928    	; 0x2a4 <respondFunctionError>
     644:	c8 01       	movw	r24, r16
     646:	70 c0       	rjmp	.+224    	; 0x728 <respondModbus+0x1dc>
			listen485();     
			return;//nu, vrem sa citim registrii de input
		}
	}else if(buff[2]!=0){
     648:	8a 81       	ldd	r24, Y+2	; 0x02
     64a:	88 23       	and	r24, r24
     64c:	31 f0       	breq	.+12     	; 0x65a <respondModbus+0x10e>
		//_delay_ms(t3_5);
        
		respondAddressError(); 
     64e:	0f de       	rcall	.-994    	; 0x26e <respondAddressError>
		PORTC&=~(1<<PINC3);
     650:	ab 98       	cbi	0x15, 3	; 21
     652:	c8 01       	movw	r24, r16
     654:	01 97       	sbiw	r24, 0x01	; 1
     656:	f1 f7       	brne	.-4      	; 0x654 <respondModbus+0x108>
     658:	6a c0       	rjmp	.+212    	; 0x72e <respondModbus+0x1e2>
		_delay_ms(10);
		return;// noi stim doar de registrii 1 si 2 
	}else if(buff[3]==1 || buff[3]==2){         
     65a:	9b 81       	ldd	r25, Y+3	; 0x03
     65c:	89 2f       	mov	r24, r25
     65e:	81 50       	subi	r24, 0x01	; 1
     660:	82 30       	cpi	r24, 0x02	; 2
     662:	10 f0       	brcs	.+4      	; 0x668 <respondModbus+0x11c>
     664:	22 e0       	ldi	r18, 0x02	; 2
     666:	52 c0       	rjmp	.+164    	; 0x70c <respondModbus+0x1c0>
     668:	8c 81       	ldd	r24, Y+4	; 0x04
		 if(buff[3]==0x2){//citim incepand cu umiditatea
     66a:	92 30       	cpi	r25, 0x02	; 2
     66c:	61 f4       	brne	.+24     	; 0x686 <respondModbus+0x13a>
            if(buff[4]!=0x00 || buff[5]!=1){               
     66e:	88 23       	and	r24, r24
     670:	79 f4       	brne	.+30     	; 0x690 <respondModbus+0x144>
     672:	8d 81       	ldd	r24, Y+5	; 0x05
     674:	81 30       	cpi	r24, 0x01	; 1
     676:	61 f4       	brne	.+24     	; 0x690 <respondModbus+0x144>
				respondAddressError();
				listen485();
				return; //ni se cer 2 registrii incepand cu umiditatea si noi stim doar atat 
            }else{
               rasp[2]=0x02;
     678:	90 93 8d 00 	sts	0x008D, r25
               rasp[3]=hum_u>>8;
     67c:	20 91 78 00 	lds	r18, 0x0078
     680:	30 91 79 00 	lds	r19, 0x0079
     684:	10 c0       	rjmp	.+32     	; 0x6a6 <respondModbus+0x15a>
               rasp[6]=rez;
               pos=7;
            }
         }
         else{
            if(buff[4]!=0x00 || buff[5]>2){              
     686:	88 23       	and	r24, r24
     688:	19 f4       	brne	.+6      	; 0x690 <respondModbus+0x144>
     68a:	8d 81       	ldd	r24, Y+5	; 0x05
     68c:	83 30       	cpi	r24, 0x03	; 3
     68e:	10 f0       	brcs	.+4      	; 0x694 <respondModbus+0x148>
				respondAddressError();  
     690:	ee dd       	rcall	.-1060   	; 0x26e <respondAddressError>
     692:	48 c0       	rjmp	.+144    	; 0x724 <respondModbus+0x1d8>
     694:	20 91 74 00 	lds	r18, 0x0074
     698:	30 91 75 00 	lds	r19, 0x0075
				listen485();
				return; //ni se cer mai mult de 2 registrii
            }else{
               if(buff[5]==0x01){
     69c:	81 30       	cpi	r24, 0x01	; 1
     69e:	b1 f4       	brne	.+44     	; 0x6cc <respondModbus+0x180>
                  rasp[2]=0x02; //vin 2 bytes pentru temperatura 
     6a0:	82 e0       	ldi	r24, 0x02	; 2
     6a2:	80 93 8d 00 	sts	0x008D, r24
                  rasp[3]=temp_u>>8;
     6a6:	83 2f       	mov	r24, r19
     6a8:	99 27       	eor	r25, r25
     6aa:	87 fd       	sbrc	r24, 7
     6ac:	9a 95       	dec	r25
     6ae:	80 93 8e 00 	sts	0x008E, r24
                  rasp[4]=temp_u & 0xFF;
     6b2:	20 93 8f 00 	sts	0x008F, r18
                  unsigned int rez = CRC16(rasp,5);
     6b6:	8b e8       	ldi	r24, 0x8B	; 139
     6b8:	90 e0       	ldi	r25, 0x00	; 0
     6ba:	65 e0       	ldi	r22, 0x05	; 5
     6bc:	70 e0       	ldi	r23, 0x00	; 0
     6be:	ac dd       	rcall	.-1192   	; 0x218 <CRC16>
                  rasp[5]=rez & 0xFF;
     6c0:	80 93 90 00 	sts	0x0090, r24
                  rez>>=8;
                  rasp[6]=rez;
     6c4:	90 93 91 00 	sts	0x0091, r25
     6c8:	27 e0       	ldi	r18, 0x07	; 7
     6ca:	20 c0       	rjmp	.+64     	; 0x70c <respondModbus+0x1c0>
                  pos=7;
               }else{
                  rasp[2]=0x04; //vin 2 bytes pentru temperatura si doi pentru umiditate
     6cc:	40 93 8d 00 	sts	0x008D, r20
                  rasp[3]=temp_u>>8;
     6d0:	83 2f       	mov	r24, r19
     6d2:	99 27       	eor	r25, r25
     6d4:	87 fd       	sbrc	r24, 7
     6d6:	9a 95       	dec	r25
     6d8:	80 93 8e 00 	sts	0x008E, r24
                  rasp[4]=temp_u & 0xFF;
     6dc:	20 93 8f 00 	sts	0x008F, r18
                  rasp[5]=hum_u>>8;
     6e0:	20 91 78 00 	lds	r18, 0x0078
     6e4:	30 91 79 00 	lds	r19, 0x0079
     6e8:	83 2f       	mov	r24, r19
     6ea:	99 27       	eor	r25, r25
     6ec:	87 fd       	sbrc	r24, 7
     6ee:	9a 95       	dec	r25
     6f0:	80 93 90 00 	sts	0x0090, r24
                  rasp[6]=hum_u & 0xFF;
     6f4:	20 93 91 00 	sts	0x0091, r18
                  unsigned int rez = CRC16(rasp,7);
     6f8:	8b e8       	ldi	r24, 0x8B	; 139
     6fa:	90 e0       	ldi	r25, 0x00	; 0
     6fc:	67 e0       	ldi	r22, 0x07	; 7
     6fe:	70 e0       	ldi	r23, 0x00	; 0
     700:	8b dd       	rcall	.-1258   	; 0x218 <CRC16>
                  rasp[7]=rez & 0xFF;
     702:	80 93 92 00 	sts	0x0092, r24
                  rez>>=8;
                  rasp[8]=rez;
     706:	90 93 93 00 	sts	0x0093, r25
     70a:	29 e0       	ldi	r18, 0x09	; 9
     70c:	80 e0       	ldi	r24, 0x00	; 0
     70e:	90 e0       	ldi	r25, 0x00	; 0
            }
         }
      }
      //_delay_ms(t1_5);  //pentru 9600 - t3,5 = 3.64583 ms; pentru 4800 - t3,5 = 7.29166
      for(uint8_t i=0;i<pos;i++){
         UWriteData(rasp[i]);
     710:	fc 01       	movw	r30, r24
     712:	e5 57       	subi	r30, 0x75	; 117
     714:	ff 4f       	sbci	r31, 0xFF	; 255
     716:	e0 81       	ld	r30, Z
}

void UWriteData(const char data)
{
	//Wait For Transmitter to become ready
	while(!(UCSRA & (1<<UDRE)));
     718:	5d 9b       	sbis	0x0b, 5	; 11
     71a:	fe cf       	rjmp	.-4      	; 0x718 <respondModbus+0x1cc>

	//Now write
	UDR=data;
     71c:	ec b9       	out	0x0c, r30	; 12
     71e:	01 96       	adiw	r24, 0x01	; 1
               }
            }
         }
      }
      //_delay_ms(t1_5);  //pentru 9600 - t3,5 = 3.64583 ms; pentru 4800 - t3,5 = 7.29166
      for(uint8_t i=0;i<pos;i++){
     720:	82 17       	cp	r24, r18
     722:	b0 f3       	brcs	.-20     	; 0x710 <respondModbus+0x1c4>
     724:	80 e4       	ldi	r24, 0x40	; 64
     726:	9c e9       	ldi	r25, 0x9C	; 156
     728:	01 97       	sbiw	r24, 0x01	; 1
     72a:	f1 f7       	brne	.-4      	; 0x728 <respondModbus+0x1dc>
	eeprom_write_byte((uint8_t*)12,umid_max);
}

void listen485(void){ //spunem la chipul 485 ca ascultam
 	_delay_ms(10);
	PORTC&=~(1<<PINC3);	
     72c:	ab 98       	cbi	0x15, 3	; 21
      //_delay_ms(t1_5);  //pentru 9600 - t3,5 = 3.64583 ms; pentru 4800 - t3,5 = 7.29166
      for(uint8_t i=0;i<pos;i++){
         UWriteData(rasp[i]);
      } 
	  listen485();
}
     72e:	df 91       	pop	r29
     730:	cf 91       	pop	r28
     732:	1f 91       	pop	r17
     734:	0f 91       	pop	r16
     736:	08 95       	ret

00000738 <readUmidLimits>:
	}
	if(temp_max==0xFF){
		temp_max=35;
	}
}
void readUmidLimits(void){
     738:	1f 93       	push	r17
	umid_min=eeprom_read_byte((uint8_t*)11);
     73a:	8b e0       	ldi	r24, 0x0B	; 11
     73c:	90 e0       	ldi	r25, 0x00	; 0
     73e:	62 d4       	rcall	.+2244   	; 0x1004 <__eerd_byte_m8>
     740:	18 2f       	mov	r17, r24
     742:	80 93 7e 00 	sts	0x007E, r24
	umid_max=eeprom_read_byte((uint8_t*)12);
     746:	8c e0       	ldi	r24, 0x0C	; 12
     748:	90 e0       	ldi	r25, 0x00	; 0
     74a:	5c d4       	rcall	.+2232   	; 0x1004 <__eerd_byte_m8>
     74c:	80 93 73 00 	sts	0x0073, r24
	if(umid_min==0xFF){
     750:	1f 3f       	cpi	r17, 0xFF	; 255
     752:	11 f4       	brne	.+4      	; 0x758 <readUmidLimits+0x20>
		umid_min=0;
     754:	10 92 7e 00 	sts	0x007E, r1
	}
	if(umid_max==0xFF){
     758:	8f 3f       	cpi	r24, 0xFF	; 255
     75a:	19 f4       	brne	.+6      	; 0x762 <readUmidLimits+0x2a>
		umid_max=100;
     75c:	84 e6       	ldi	r24, 0x64	; 100
     75e:	80 93 73 00 	sts	0x0073, r24
	}
}
     762:	1f 91       	pop	r17
     764:	08 95       	ret

00000766 <readTempLimits>:
   for(uint8_t i=0;i<6;i++){
     UWriteData(rasp_g[i]);
   }
}

void readTempLimits(void){
     766:	1f 93       	push	r17
	temp_min=eeprom_read_byte((uint8_t*)1);
     768:	81 e0       	ldi	r24, 0x01	; 1
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	4b d4       	rcall	.+2198   	; 0x1004 <__eerd_byte_m8>
     76e:	18 2f       	mov	r17, r24
     770:	80 93 71 00 	sts	0x0071, r24
	temp_max=eeprom_read_byte((uint8_t*)2);
     774:	82 e0       	ldi	r24, 0x02	; 2
     776:	90 e0       	ldi	r25, 0x00	; 0
     778:	45 d4       	rcall	.+2186   	; 0x1004 <__eerd_byte_m8>
     77a:	98 2f       	mov	r25, r24
     77c:	80 93 72 00 	sts	0x0072, r24
	if(temp_min==0xFF){
     780:	1f 3f       	cpi	r17, 0xFF	; 255
     782:	19 f4       	brne	.+6      	; 0x78a <readTempLimits+0x24>
		temp_min=10;
     784:	8a e0       	ldi	r24, 0x0A	; 10
     786:	80 93 71 00 	sts	0x0071, r24
	}
	if(temp_max==0xFF){
     78a:	9f 3f       	cpi	r25, 0xFF	; 255
     78c:	19 f4       	brne	.+6      	; 0x794 <readTempLimits+0x2e>
		temp_max=35;
     78e:	83 e2       	ldi	r24, 0x23	; 35
     790:	80 93 72 00 	sts	0x0072, r24
	}
}
     794:	1f 91       	pop	r17
     796:	08 95       	ret

00000798 <main>:
	PORTB^=(1<<PINB2);
}


int main(void)
 {
     798:	6f 92       	push	r6
     79a:	7f 92       	push	r7
     79c:	8f 92       	push	r8
     79e:	9f 92       	push	r9
     7a0:	af 92       	push	r10
     7a2:	bf 92       	push	r11
     7a4:	cf 92       	push	r12
     7a6:	df 92       	push	r13
     7a8:	ef 92       	push	r14
     7aa:	ff 92       	push	r15
     7ac:	0f 93       	push	r16
     7ae:	1f 93       	push	r17
     7b0:	df 93       	push	r29
     7b2:	cf 93       	push	r28
     7b4:	cd b7       	in	r28, 0x3d	; 61
     7b6:	de b7       	in	r29, 0x3e	; 62
     7b8:	2a 97       	sbiw	r28, 0x0a	; 10
     7ba:	0f b6       	in	r0, 0x3f	; 63
     7bc:	f8 94       	cli
     7be:	de bf       	out	0x3e, r29	; 62
     7c0:	0f be       	out	0x3f, r0	; 63
     7c2:	cd bf       	out	0x3d, r28	; 61
	
	rasp_g[0]=ADDRESS;
     7c4:	85 e0       	ldi	r24, 0x05	; 5
     7c6:	80 93 81 00 	sts	0x0081, r24
	rasp[0]=ADDRESS; //adresa
     7ca:	80 93 8b 00 	sts	0x008B, r24
	rasp[1]=0x04; //citire registrii de input
     7ce:	84 e0       	ldi	r24, 0x04	; 4
     7d0:	80 93 8c 00 	sts	0x008C, r24
		
	USARTInit(103);
     7d4:	87 e6       	ldi	r24, 0x67	; 103
     7d6:	90 e0       	ldi	r25, 0x00	; 0
     7d8:	42 dc       	rcall	.-1916   	; 0x5e <USARTInit>
	
	PORTC|=(1<<PINC4)|(1<<PINC5);
     7da:	85 b3       	in	r24, 0x15	; 21
     7dc:	80 63       	ori	r24, 0x30	; 48
     7de:	85 bb       	out	0x15, r24	; 21
	DDRC|=(1<<PINC3);
     7e0:	a3 9a       	sbi	0x14, 3	; 20
	PORTC &=~(1<<PINC3);
     7e2:	ab 98       	cbi	0x15, 3	; 21
	
	DDRB |= (1<<PINB1) | (1<<PINB2); //PINB1 pentru alarma si PINB2 pentru led
     7e4:	87 b3       	in	r24, 0x17	; 23
     7e6:	86 60       	ori	r24, 0x06	; 6
     7e8:	87 bb       	out	0x17, r24	; 23
	PORTB &= ~(1<<PINB1);
     7ea:	c1 98       	cbi	0x18, 1	; 24
	PORTB &= ~(1<<PINB2);
     7ec:	c2 98       	cbi	0x18, 2	; 24
	
	readUmidLimits();
     7ee:	a4 df       	rcall	.-184    	; 0x738 <readUmidLimits>
	readTempLimits();
     7f0:	ba df       	rcall	.-140    	; 0x766 <readTempLimits>

	I2CInit();
     7f2:	89 d0       	rcall	.+274    	; 0x906 <I2CInit>
     7f4:	10 e9       	ldi	r17, 0x90	; 144
     7f6:	61 2e       	mov	r6, r17
     7f8:	11 e0       	ldi	r17, 0x01	; 1
     7fa:	71 2e       	mov	r7, r17
	unsigned char buff[10];
	
	while(1){		
		_delay_us(100);
		
		if(UDataAvailable()){
     7fc:	7e 01       	movw	r14, r28
     7fe:	08 94       	sec
     800:	e1 1c       	adc	r14, r1
     802:	f1 1c       	adc	r15, r1
			b = &buff[0];
			while(UDataAvailable()){
				*b=UReadData();
				
				*b++;    
				if(b==&buff[0]+1 && buff[0]>0xF0){
     804:	b2 e0       	ldi	r27, 0x02	; 2
     806:	ab 2e       	mov	r10, r27
     808:	b1 2c       	mov	r11, r1
     80a:	ac 0e       	add	r10, r28
     80c:	bd 1e       	adc	r11, r29
					*b--;
				}
				if(b>(&buff[0]+8)){ //avem destule caractere in mesaj
     80e:	a9 e0       	ldi	r26, 0x09	; 9
     810:	ca 2e       	mov	r12, r26
     812:	d1 2c       	mov	r13, r1
     814:	cc 0e       	add	r12, r28
     816:	dd 1e       	adc	r13, r29
     818:	f0 ee       	ldi	r31, 0xE0	; 224
     81a:	8f 2e       	mov	r8, r31
     81c:	fe e2       	ldi	r31, 0x2E	; 46
     81e:	9f 2e       	mov	r9, r31
     820:	c3 01       	movw	r24, r6
     822:	01 97       	sbiw	r24, 0x01	; 1
     824:	f1 f7       	brne	.-4      	; 0x822 <main+0x8a>
	unsigned char buff[10];
	
	while(1){		
		_delay_us(100);
		
		if(UDataAvailable()){
     826:	ab dc       	rcall	.-1706   	; 0x17e <UDataAvailable>
     828:	88 23       	and	r24, r24
     82a:	a1 f1       	breq	.+104    	; 0x894 <main+0xfc>
     82c:	87 01       	movw	r16, r14
     82e:	14 c0       	rjmp	.+40     	; 0x858 <main+0xc0>
			b = &buff[0];
			while(UDataAvailable()){
				*b=UReadData();
     830:	79 dc       	rcall	.-1806   	; 0x124 <UReadData>
     832:	f8 01       	movw	r30, r16
     834:	81 93       	st	Z+, r24
				
				*b++;    
				if(b==&buff[0]+1 && buff[0]>0xF0){
     836:	ea 15       	cp	r30, r10
     838:	fb 05       	cpc	r31, r11
     83a:	11 f0       	breq	.+4      	; 0x840 <main+0xa8>
     83c:	8f 01       	movw	r16, r30
     83e:	03 c0       	rjmp	.+6      	; 0x846 <main+0xae>
     840:	89 81       	ldd	r24, Y+1	; 0x01
     842:	81 3f       	cpi	r24, 0xF1	; 241
     844:	28 f0       	brcs	.+10     	; 0x850 <main+0xb8>
					*b--;
				}
				if(b>(&buff[0]+8)){ //avem destule caractere in mesaj
     846:	c0 16       	cp	r12, r16
     848:	d1 06       	cpc	r13, r17
     84a:	18 f4       	brcc	.+6      	; 0x852 <main+0xba>
					UFlushBuffer();
     84c:	df dc       	rcall	.-1602   	; 0x20c <UFlushBuffer>
     84e:	0a c0       	rjmp	.+20     	; 0x864 <main+0xcc>
     850:	85 01       	movw	r16, r10
     852:	c4 01       	movw	r24, r8
     854:	01 97       	sbiw	r24, 0x01	; 1
     856:	f1 f7       	brne	.-4      	; 0x854 <main+0xbc>
	while(1){		
		_delay_us(100);
		
		if(UDataAvailable()){
			b = &buff[0];
			while(UDataAvailable()){
     858:	92 dc       	rcall	.-1756   	; 0x17e <UDataAvailable>
     85a:	88 23       	and	r24, r24
     85c:	49 f7       	brne	.-46     	; 0x830 <main+0x98>
				//UWriteData(*b);
				_delay_ms(t1_5); //timpul inter caracter
			}
			
			
			if(b<(&buff[0]+8)){ //nu avem destule caractere in mesaj
     85e:	0c 15       	cp	r16, r12
     860:	1d 05       	cpc	r17, r13
     862:	c0 f0       	brcs	.+48     	; 0x894 <main+0xfc>
				
			}else{
				unsigned int rez = CRC16(buff,6);
     864:	c7 01       	movw	r24, r14
     866:	66 e0       	ldi	r22, 0x06	; 6
     868:	70 e0       	ldi	r23, 0x00	; 0
     86a:	d6 dc       	rcall	.-1620   	; 0x218 <CRC16>
     86c:	ac 01       	movw	r20, r24
				if((rez & 0xFF)!=(int)buff[6]){ //daca CRC-ul nu este corect, ignoram mesajul
     86e:	9c 01       	movw	r18, r24
     870:	30 70       	andi	r19, 0x00	; 0
     872:	8f 81       	ldd	r24, Y+7	; 0x07
     874:	90 e0       	ldi	r25, 0x00	; 0
     876:	28 17       	cp	r18, r24
     878:	39 07       	cpc	r19, r25
     87a:	61 f4       	brne	.+24     	; 0x894 <main+0xfc>
					
				}else{
					
					if((rez >> 8)!=buff[7]){	//daca CRC-ul nu este corect, ignoram mesajul
     87c:	25 2f       	mov	r18, r21
     87e:	33 27       	eor	r19, r19
     880:	88 85       	ldd	r24, Y+8	; 0x08
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	28 17       	cp	r18, r24
     886:	39 07       	cpc	r19, r25
     888:	29 f4       	brne	.+10     	; 0x894 <main+0xfc>
						
					}else{			
						if(buff[0]==ADDRESS){
     88a:	89 81       	ldd	r24, Y+1	; 0x01
     88c:	85 30       	cpi	r24, 0x05	; 5
     88e:	11 f4       	brne	.+4      	; 0x894 <main+0xfc>
							//readTempHum();
							//sum_timp=0;
							respondModbus(buff);
     890:	c7 01       	movw	r24, r14
     892:	5c de       	rcall	.-840    	; 0x54c <respondModbus>
				}
			}
			
			
		}
		UFlushBuffer();
     894:	bb dc       	rcall	.-1674   	; 0x20c <UFlushBuffer>
		if(++sum_timp>=20000){
     896:	80 91 7c 00 	lds	r24, 0x007C
     89a:	90 91 7d 00 	lds	r25, 0x007D
     89e:	01 96       	adiw	r24, 0x01	; 1
     8a0:	90 93 7d 00 	sts	0x007D, r25
     8a4:	80 93 7c 00 	sts	0x007C, r24
     8a8:	80 52       	subi	r24, 0x20	; 32
     8aa:	9e 44       	sbci	r25, 0x4E	; 78
     8ac:	0c f4       	brge	.+2      	; 0x8b0 <main+0x118>
     8ae:	b8 cf       	rjmp	.-144    	; 0x820 <main+0x88>
			readTempHum();
     8b0:	26 dd       	rcall	.-1460   	; 0x2fe <readTempHum>
			if((temp_u<temp_min) || (temp_u>temp_max) || (hum_u<umid_min) || (hum_u>umid_max)){//daca sunt depasite limitele
     8b2:	20 91 74 00 	lds	r18, 0x0074
     8b6:	30 91 75 00 	lds	r19, 0x0075
     8ba:	80 91 71 00 	lds	r24, 0x0071
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	28 17       	cp	r18, r24
     8c2:	39 07       	cpc	r19, r25
     8c4:	b4 f0       	brlt	.+44     	; 0x8f2 <main+0x15a>
     8c6:	80 91 72 00 	lds	r24, 0x0072
     8ca:	90 e0       	ldi	r25, 0x00	; 0
     8cc:	82 17       	cp	r24, r18
     8ce:	93 07       	cpc	r25, r19
     8d0:	84 f0       	brlt	.+32     	; 0x8f2 <main+0x15a>
     8d2:	20 91 78 00 	lds	r18, 0x0078
     8d6:	30 91 79 00 	lds	r19, 0x0079
     8da:	80 91 7e 00 	lds	r24, 0x007E
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	28 17       	cp	r18, r24
     8e2:	39 07       	cpc	r19, r25
     8e4:	34 f0       	brlt	.+12     	; 0x8f2 <main+0x15a>
     8e6:	80 91 73 00 	lds	r24, 0x0073
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 17       	cp	r24, r18
     8ee:	93 07       	cpc	r25, r19
     8f0:	1c f4       	brge	.+6      	; 0x8f8 <main+0x160>
				PORTB|=(1<<PINB1);
     8f2:	c1 9a       	sbi	0x18, 1	; 24
				PORTB|=(1<<PINB2);
     8f4:	c2 9a       	sbi	0x18, 2	; 24
     8f6:	02 c0       	rjmp	.+4      	; 0x8fc <main+0x164>
				//	_delay_ms(200);
				//	PORTB&=~(1<<PINB2);
				//	_delay_ms(200);
				//}
			}else{
				PORTB&=~(1<<PINB1);
     8f8:	c1 98       	cbi	0x18, 1	; 24
				PORTB&=~(1<<PINB2);
     8fa:	c2 98       	cbi	0x18, 2	; 24
			}
			sum_timp=0;
     8fc:	10 92 7d 00 	sts	0x007D, r1
     900:	10 92 7c 00 	sts	0x007C, r1
     904:	8d cf       	rjmp	.-230    	; 0x820 <main+0x88>

00000906 <I2CInit>:


void I2CInit()
{
	//Set up TWI Module
	TWBR = 72;
     906:	88 e4       	ldi	r24, 0x48	; 72
     908:	80 b9       	out	0x00, r24	; 0
	TWSR = 0;
     90a:	11 b8       	out	0x01, r1	; 1

	//Enable the TWI Module
	TWCR|=(1<<TWEN);
     90c:	86 b7       	in	r24, 0x36	; 54
     90e:	84 60       	ori	r24, 0x04	; 4
     910:	86 bf       	out	0x36, r24	; 54


}
     912:	08 95       	ret

00000914 <I2CClose>:

void I2CClose()
{
	//Disable the module
	TWCR&=(~(1<<TWEN));
     914:	86 b7       	in	r24, 0x36	; 54
     916:	8b 7f       	andi	r24, 0xFB	; 251
     918:	86 bf       	out	0x36, r24	; 54
}
     91a:	08 95       	ret

0000091c <I2CStart>:


void I2CStart()
{
	//Put Start Condition on Bus
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTA);
     91c:	84 ea       	ldi	r24, 0xA4	; 164
     91e:	86 bf       	out	0x36, r24	; 54
     920:	80 91 7f 00 	lds	r24, 0x007F
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     924:	25 e3       	ldi	r18, 0x35	; 53
     926:	04 c0       	rjmp	.+8      	; 0x930 <I2CStart+0x14>
     928:	82 2f       	mov	r24, r18
     92a:	8a 95       	dec	r24
     92c:	f1 f7       	brne	.-4      	; 0x92a <I2CStart+0xe>
     92e:	89 2f       	mov	r24, r25

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)) && delay_cnt++<100){
     930:	06 b6       	in	r0, 0x36	; 54
     932:	07 fc       	sbrc	r0, 7
     934:	04 c0       	rjmp	.+8      	; 0x93e <I2CStart+0x22>
     936:	98 2f       	mov	r25, r24
     938:	9f 5f       	subi	r25, 0xFF	; 255
     93a:	84 36       	cpi	r24, 0x64	; 100
     93c:	a8 f3       	brcs	.-22     	; 0x928 <I2CStart+0xc>
		_delay_us(10);
	}
	delay_cnt=0;
     93e:	10 92 7f 00 	sts	0x007F, r1
	
}
     942:	08 95       	ret

00000944 <I2C_IsBusy>:

uint8_t I2C_IsBusy(){
	return (!(TWCR & (1<<TWINT)));
     944:	86 b7       	in	r24, 0x36	; 54
     946:	80 95       	com	r24
}
     948:	88 1f       	adc	r24, r24
     94a:	88 27       	eor	r24, r24
     94c:	88 1f       	adc	r24, r24
     94e:	08 95       	ret

00000950 <GetErr>:

uint8_t GetErr(){
	return err;
}
     950:	80 91 80 00 	lds	r24, 0x0080
     954:	08 95       	ret

00000956 <I2CStop>:

void I2CStop()
{
	//Put Stop Condition on bus
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     956:	84 e9       	ldi	r24, 0x94	; 148
     958:	86 bf       	out	0x36, r24	; 54
     95a:	80 91 7f 00 	lds	r24, 0x007F
     95e:	25 e3       	ldi	r18, 0x35	; 53
     960:	04 c0       	rjmp	.+8      	; 0x96a <I2CStop+0x14>
     962:	82 2f       	mov	r24, r18
     964:	8a 95       	dec	r24
     966:	f1 f7       	brne	.-4      	; 0x964 <I2CStop+0xe>
     968:	89 2f       	mov	r24, r25
	
	//Wait for STOP to finish
	while(!(TWCR & (1<<TWINT)) && delay_cnt++<100){
     96a:	06 b6       	in	r0, 0x36	; 54
     96c:	07 fc       	sbrc	r0, 7
     96e:	04 c0       	rjmp	.+8      	; 0x978 <I2CStop+0x22>
     970:	98 2f       	mov	r25, r24
     972:	9f 5f       	subi	r25, 0xFF	; 255
     974:	84 36       	cpi	r24, 0x64	; 100
     976:	a8 f3       	brcs	.-22     	; 0x962 <I2CStop+0xc>
		_delay_us(10);
	}
	delay_cnt=0;
     978:	10 92 7f 00 	sts	0x007F, r1
     97c:	85 e3       	ldi	r24, 0x35	; 53
     97e:	8a 95       	dec	r24
     980:	f1 f7       	brne	.-4      	; 0x97e <I2CStop+0x28>
	_delay_us(10);
}
     982:	08 95       	ret

00000984 <I2CWriteByte>:

uint8_t I2CWriteByte(uint8_t data)
{
	
	TWDR=data;	
     984:	83 b9       	out	0x03, r24	; 3

	//Initiate Transfer
	TWCR=(1<<TWEN)|(1<<TWINT) | (0<<TWSTA) | (0<<TWSTO) ;
     986:	84 e8       	ldi	r24, 0x84	; 132
     988:	86 bf       	out	0x36, r24	; 54
     98a:	80 91 7f 00 	lds	r24, 0x007F
     98e:	25 e3       	ldi	r18, 0x35	; 53
     990:	04 c0       	rjmp	.+8      	; 0x99a <I2CWriteByte+0x16>
     992:	82 2f       	mov	r24, r18
     994:	8a 95       	dec	r24
     996:	f1 f7       	brne	.-4      	; 0x994 <I2CWriteByte+0x10>
     998:	89 2f       	mov	r24, r25

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)) && delay_cnt++<100){
     99a:	06 b6       	in	r0, 0x36	; 54
     99c:	07 fc       	sbrc	r0, 7
     99e:	04 c0       	rjmp	.+8      	; 0x9a8 <I2CWriteByte+0x24>
     9a0:	98 2f       	mov	r25, r24
     9a2:	9f 5f       	subi	r25, 0xFF	; 255
     9a4:	84 36       	cpi	r24, 0x64	; 100
     9a6:	a8 f3       	brcs	.-22     	; 0x992 <I2CWriteByte+0xe>
		_delay_us(10);
	}
	delay_cnt=0;
     9a8:	10 92 7f 00 	sts	0x007F, r1
	if(delay_cnt>=100){
		return FALSE;
	}

	//Check Status
	if((TWSR) == 0x18 || (TWSR) == 0x28 || (TWSR) == 0x40)
     9ac:	81 b1       	in	r24, 0x01	; 1
     9ae:	88 31       	cpi	r24, 0x18	; 24
     9b0:	79 f0       	breq	.+30     	; 0x9d0 <I2CWriteByte+0x4c>
     9b2:	81 b1       	in	r24, 0x01	; 1
     9b4:	88 32       	cpi	r24, 0x28	; 40
     9b6:	61 f0       	breq	.+24     	; 0x9d0 <I2CWriteByte+0x4c>
     9b8:	81 b1       	in	r24, 0x01	; 1
     9ba:	80 34       	cpi	r24, 0x40	; 64
     9bc:	49 f0       	breq	.+18     	; 0x9d0 <I2CWriteByte+0x4c>
		//or
		//DATA Transmitted and ACK recived

		return TRUE;
	}
	else if((TWSR)==0x20){ //no Ack Received
     9be:	81 b1       	in	r24, 0x01	; 1
     9c0:	80 32       	cpi	r24, 0x20	; 32
     9c2:	11 f0       	breq	.+4      	; 0x9c8 <I2CWriteByte+0x44>
     9c4:	80 e0       	ldi	r24, 0x00	; 0
     9c6:	08 95       	ret
		TWCR = (1<<TWSTA) | (1<<TWSTO) | (1<<TWINT);
     9c8:	80 eb       	ldi	r24, 0xB0	; 176
     9ca:	86 bf       	out	0x36, r24	; 54
     9cc:	80 e2       	ldi	r24, 0x20	; 32
     9ce:	08 95       	ret
		return 0x20;
     9d0:	81 e0       	ldi	r24, 0x01	; 1
	}
	else
		return FALSE;	//Error
}
     9d2:	08 95       	ret

000009d4 <I2CReadByte>:

uint8_t I2CReadByte(uint8_t *data,uint8_t ack)
{
     9d4:	fc 01       	movw	r30, r24
	//Set up ACK
	if(ack)
     9d6:	66 23       	and	r22, r22
     9d8:	19 f0       	breq	.+6      	; 0x9e0 <I2CReadByte+0xc>
	{
		//return ACK after reception
		TWCR|=(1<<TWEA);
     9da:	86 b7       	in	r24, 0x36	; 54
     9dc:	80 64       	ori	r24, 0x40	; 64
     9de:	02 c0       	rjmp	.+4      	; 0x9e4 <I2CReadByte+0x10>
	else
	{
		//return NACK after reception
		//Signals slave to stop giving more data
		//usually used for last byte read.
		TWCR&=(~(1<<TWEA));
     9e0:	86 b7       	in	r24, 0x36	; 54
     9e2:	8f 7b       	andi	r24, 0xBF	; 191
     9e4:	86 bf       	out	0x36, r24	; 54
	}

	//Now enable Reception of data by clearing TWINT
	TWCR|=(1<<TWINT);
     9e6:	86 b7       	in	r24, 0x36	; 54
     9e8:	80 68       	ori	r24, 0x80	; 128
     9ea:	86 bf       	out	0x36, r24	; 54

	//Wait till done
	while(!(TWCR & (1<<TWINT)));
     9ec:	06 b6       	in	r0, 0x36	; 54
     9ee:	07 fe       	sbrs	r0, 7
     9f0:	fd cf       	rjmp	.-6      	; 0x9ec <I2CReadByte+0x18>

	//Check status
	if((TWSR & 0xF8) == 0x58 || (TWSR & 0xF8) == 0x50)
     9f2:	81 b1       	in	r24, 0x01	; 1
     9f4:	88 7f       	andi	r24, 0xF8	; 248
     9f6:	88 35       	cpi	r24, 0x58	; 88
     9f8:	31 f0       	breq	.+12     	; 0xa06 <I2CReadByte+0x32>
     9fa:	81 b1       	in	r24, 0x01	; 1
     9fc:	88 7f       	andi	r24, 0xF8	; 248
     9fe:	80 35       	cpi	r24, 0x50	; 80
     a00:	11 f0       	breq	.+4      	; 0xa06 <I2CReadByte+0x32>
     a02:	80 e0       	ldi	r24, 0x00	; 0
     a04:	08 95       	ret
		//	or
		//Data received and NACK returned

		//Read the data

		*data=TWDR;
     a06:	83 b1       	in	r24, 0x03	; 3
     a08:	80 83       	st	Z, r24
     a0a:	81 e0       	ldi	r24, 0x01	; 1
		return TRUE;
	}
	else
		return FALSE;	//Error
	
}
     a0c:	08 95       	ret

00000a0e <shiftIn>:
/**
 */
 
 
int shiftIn(int numBits)
{
     a0e:	bc 01       	movw	r22, r24
     a10:	20 e0       	ldi	r18, 0x00	; 0
     a12:	30 e0       	ldi	r19, 0x00	; 0
     a14:	40 e0       	ldi	r20, 0x00	; 0
     a16:	50 e0       	ldi	r21, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     a18:	e0 e4       	ldi	r30, 0x40	; 64
     a1a:	fc e9       	ldi	r31, 0x9C	; 156
     a1c:	13 c0       	rjmp	.+38     	; 0xa44 <shiftIn+0x36>
  int ret = 0;
  int i;

  for (i=0; i<numBits; ++i)
  {
	CLOCKPORT |= (1<<CLOCK);
     a1e:	93 9a       	sbi	0x12, 3	; 18
     a20:	cf 01       	movw	r24, r30
     a22:	01 97       	sbiw	r24, 0x01	; 1
     a24:	f1 f7       	brne	.-4      	; 0xa22 <shiftIn+0x14>
    _delay_ms(10);  // I don't know why I need this, but without it I don't get my 8 lsb of temp
    ret = ret*2 + ((DATAPIN & (1 << DATA))?1:0);
     a26:	22 0f       	add	r18, r18
     a28:	33 1f       	adc	r19, r19
     a2a:	80 b3       	in	r24, 0x10	; 16
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	96 95       	lsr	r25
     a30:	87 95       	ror	r24
     a32:	96 95       	lsr	r25
     a34:	87 95       	ror	r24
     a36:	81 70       	andi	r24, 0x01	; 1
     a38:	90 70       	andi	r25, 0x00	; 0
     a3a:	28 0f       	add	r18, r24
     a3c:	39 1f       	adc	r19, r25
    CLOCKPORT &=~(1<<CLOCK);
     a3e:	93 98       	cbi	0x12, 3	; 18
int shiftIn(int numBits)
{
  int ret = 0;
  int i;

  for (i=0; i<numBits; ++i)
     a40:	4f 5f       	subi	r20, 0xFF	; 255
     a42:	5f 4f       	sbci	r21, 0xFF	; 255
     a44:	46 17       	cp	r20, r22
     a46:	57 07       	cpc	r21, r23
     a48:	54 f3       	brlt	.-44     	; 0xa1e <shiftIn+0x10>
    ret = ret*2 + ((DATAPIN & (1 << DATA))?1:0);
    CLOCKPORT &=~(1<<CLOCK);
  }

  return(ret);
}
     a4a:	c9 01       	movw	r24, r18
     a4c:	08 95       	ret

00000a4e <sendCommandSHT>:

void sendCommandSHT(int _command)
{
     a4e:	bc 01       	movw	r22, r24
	int ack;
	
	DATADDR |= (1<<DATA);
     a50:	8a 9a       	sbi	0x11, 2	; 17
	CLOCKDDR |=(1<<CLOCK);
     a52:	8b 9a       	sbi	0x11, 3	; 17
  // Transmission Start
	DATAPORT |= (1<<DATA);
     a54:	92 9a       	sbi	0x12, 2	; 18
	CLOCKPORT |= (1<<CLOCK);
     a56:	93 9a       	sbi	0x12, 3	; 18
	DATAPORT &=~(1<<DATA);
     a58:	92 98       	cbi	0x12, 2	; 18
	CLOCKPORT &=~(1<<CLOCK);
     a5a:	93 98       	cbi	0x12, 3	; 18
	CLOCKPORT |= (1<<CLOCK);
     a5c:	93 9a       	sbi	0x12, 3	; 18
	DATAPORT |= (1<<DATA);
     a5e:	92 9a       	sbi	0x12, 2	; 18
	CLOCKPORT &=~(1<<CLOCK);
     a60:	93 98       	cbi	0x12, 3	; 18
     a62:	40 e8       	ldi	r20, 0x80	; 128
     a64:	50 e0       	ldi	r21, 0x00	; 0
     a66:	20 e0       	ldi	r18, 0x00	; 0
     a68:	30 e0       	ldi	r19, 0x00	; 0

  // The command (3 msb are address and must be 000, and last 5 bits are command)
//  shiftOut(_dataPin, _clockPin, MSBFIRST, _command);
  for (int i=0x80;i>0;i/=2)             //shift bit for masking
  { 
    if (i & _command) 
     a6a:	ca 01       	movw	r24, r20
     a6c:	86 23       	and	r24, r22
     a6e:	97 23       	and	r25, r23
     a70:	89 2b       	or	r24, r25
     a72:	11 f0       	breq	.+4      	; 0xa78 <sendCommandSHT+0x2a>
		DATAPORT |= (1<<DATA);
     a74:	92 9a       	sbi	0x12, 2	; 18
     a76:	01 c0       	rjmp	.+2      	; 0xa7a <sendCommandSHT+0x2c>
    else 
		DATAPORT &=~(1<<DATA);
     a78:	92 98       	cbi	0x12, 2	; 18
	
	CLOCKPORT |= (1<<CLOCK);
     a7a:	93 9a       	sbi	0x12, 3	; 18
    
	CLOCKPORT &=~(1<<CLOCK);    
     a7c:	93 98       	cbi	0x12, 3	; 18
	DATAPORT |= (1<<DATA);
	CLOCKPORT &=~(1<<CLOCK);

  // The command (3 msb are address and must be 000, and last 5 bits are command)
//  shiftOut(_dataPin, _clockPin, MSBFIRST, _command);
  for (int i=0x80;i>0;i/=2)             //shift bit for masking
     a7e:	55 95       	asr	r21
     a80:	47 95       	ror	r20
     a82:	2f 5f       	subi	r18, 0xFF	; 255
     a84:	3f 4f       	sbci	r19, 0xFF	; 255
     a86:	28 30       	cpi	r18, 0x08	; 8
     a88:	31 05       	cpc	r19, r1
     a8a:	79 f7       	brne	.-34     	; 0xa6a <sendCommandSHT+0x1c>
	CLOCKPORT &=~(1<<CLOCK);    
  }


  // Verify we get the correct ack
  CLOCKPORT |= (1<<CLOCK);
     a8c:	93 9a       	sbi	0x12, 3	; 18
  DATADDR &=~(1<<DATA); //we put data pin in input mode
     a8e:	8a 98       	cbi	0x11, 2	; 17
  ack = (DATAPIN & (1 << DATA));//bit_is_set(DATAPORT,DATA);
     a90:	80 b3       	in	r24, 0x10	; 16
  if (ack) {
    //Serial.println("Ack Error 0");
  }
  CLOCKPORT &=~(1<<CLOCK);
     a92:	93 98       	cbi	0x12, 3	; 18
  
  ack = (DATAPIN & (1 << DATA)); //bit_is_set(DATAPORT,DATA);
     a94:	80 b3       	in	r24, 0x10	; 16
  if (!ack) {
    //Serial.println("Ack Error 1");
  }
  
}
     a96:	08 95       	ret

00000a98 <waitForResultSHT>:
void waitForResultSHT(void)
{
  int i;
  int ack;

  DATADDR &=~(1<<DATA); //we put data pin in input mode
     a98:	8a 98       	cbi	0x11, 2	; 17
     a9a:	20 e0       	ldi	r18, 0x00	; 0
     a9c:	30 e0       	ldi	r19, 0x00	; 0
     a9e:	40 e4       	ldi	r20, 0x40	; 64
     aa0:	5c e9       	ldi	r21, 0x9C	; 156
     aa2:	ca 01       	movw	r24, r20
     aa4:	01 97       	sbiw	r24, 0x01	; 1
     aa6:	f1 f7       	brne	.-4      	; 0xaa4 <waitForResultSHT+0xc>
  for(i= 0; i < 100; ++i)
  {
    _delay_ms(10);
    ack = (DATAPIN & (1 << DATA));//bit_is_set(DATAPORT,DATA);

    if (!ack) {
     aa8:	82 9b       	sbis	0x10, 2	; 16
     aaa:	05 c0       	rjmp	.+10     	; 0xab6 <waitForResultSHT+0x1e>
  int i;
  int ack;

  DATADDR &=~(1<<DATA); //we put data pin in input mode

  for(i= 0; i < 100; ++i)
     aac:	2f 5f       	subi	r18, 0xFF	; 255
     aae:	3f 4f       	sbci	r19, 0xFF	; 255
     ab0:	24 36       	cpi	r18, 0x64	; 100
     ab2:	31 05       	cpc	r19, r1
     ab4:	b1 f7       	brne	.-20     	; 0xaa2 <waitForResultSHT+0xa>
     ab6:	08 95       	ret

00000ab8 <getData16SHT>:
    //Serial.println("Ack Error 2"); // Can't do serial stuff here, need another way of reporting errors
  }
}

int getData16SHT(void)
{
     ab8:	0f 93       	push	r16
     aba:	1f 93       	push	r17
  int val;

  // Get the most significant bits
  DATADDR &=~(1<<DATA); //we put data pin in input mode
     abc:	8a 98       	cbi	0x11, 2	; 17
  CLOCKDDR |= (1<<CLOCK); //we put clock pin in output mode
     abe:	8b 9a       	sbi	0x11, 3	; 17
  
  val = shiftIn(8);
     ac0:	88 e0       	ldi	r24, 0x08	; 8
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	a4 df       	rcall	.-184    	; 0xa0e <shiftIn>
  val *= 256;
     ac6:	18 2f       	mov	r17, r24
     ac8:	00 e0       	ldi	r16, 0x00	; 0

  // Send the required ack
  DATADDR |=(1<<DATA); //we put data pin in output mode
     aca:	8a 9a       	sbi	0x11, 2	; 17
  DATAPORT |= (1<<DATA);
     acc:	92 9a       	sbi	0x12, 2	; 18
  DATAPORT &=~(1<<DATA);
     ace:	92 98       	cbi	0x12, 2	; 18
  CLOCKPORT |= (1<<CLOCK);  
     ad0:	93 9a       	sbi	0x12, 3	; 18
  CLOCKPORT &=~(1<<CLOCK);  
     ad2:	93 98       	cbi	0x12, 3	; 18

  // Get the least significant bits
  DATADDR &=~(1<<DATA); //we put data pin in input mode
     ad4:	8a 98       	cbi	0x11, 2	; 17
  val |= shiftIn(8);
     ad6:	88 e0       	ldi	r24, 0x08	; 8
     ad8:	90 e0       	ldi	r25, 0x00	; 0
     ada:	99 df       	rcall	.-206    	; 0xa0e <shiftIn>
     adc:	08 2b       	or	r16, r24
     ade:	19 2b       	or	r17, r25

  return val;
}
     ae0:	c8 01       	movw	r24, r16
     ae2:	1f 91       	pop	r17
     ae4:	0f 91       	pop	r16
     ae6:	08 95       	ret

00000ae8 <skipCrcSHT>:

void skipCrcSHT(void)
{
  // Skip acknowledge to end trans (no CRC)
  DATADDR |= (1<<DATA); //we put data pin in output mode
     ae8:	8a 9a       	sbi	0x11, 2	; 17
  CLOCKDDR |= (1<<CLOCK); //we put clock pin in output mode
     aea:	8b 9a       	sbi	0x11, 3	; 17

  DATAPORT |= (1<<DATA);
     aec:	92 9a       	sbi	0x12, 2	; 18
  CLOCKPORT |= (1<<CLOCK);
     aee:	93 9a       	sbi	0x12, 3	; 18
  CLOCKPORT &=~(1<<CLOCK);  
     af0:	93 98       	cbi	0x12, 3	; 18
}
     af2:	08 95       	ret

00000af4 <readTempRaw>:

/**
 * Reads the current raw temperature value
 */
float readTempRaw(void)
{
     af4:	ef 92       	push	r14
     af6:	ff 92       	push	r15
     af8:	0f 93       	push	r16
     afa:	1f 93       	push	r17
  int val;

  // Command to send to the SHT1x to request Temperature
  int _gTempCmd  = 0b00000011;

  sendCommandSHT(_gTempCmd);
     afc:	83 e0       	ldi	r24, 0x03	; 3
     afe:	90 e0       	ldi	r25, 0x00	; 0
     b00:	a6 df       	rcall	.-180    	; 0xa4e <sendCommandSHT>
  waitForResultSHT();
     b02:	ca df       	rcall	.-108    	; 0xa98 <waitForResultSHT>
  val = getData16SHT();
     b04:	d9 df       	rcall	.-78     	; 0xab8 <getData16SHT>
     b06:	7c 01       	movw	r14, r24
  skipCrcSHT();
     b08:	ef df       	rcall	.-34     	; 0xae8 <skipCrcSHT>
     b0a:	00 27       	eor	r16, r16
     b0c:	f7 fc       	sbrc	r15, 7
     b0e:	00 95       	com	r16
     b10:	10 2f       	mov	r17, r16
     b12:	c8 01       	movw	r24, r16
     b14:	b7 01       	movw	r22, r14
     b16:	15 d1       	rcall	.+554    	; 0xd42 <__floatsisf>

  return (val);
}
     b18:	1f 91       	pop	r17
     b1a:	0f 91       	pop	r16
     b1c:	ff 90       	pop	r15
     b1e:	ef 90       	pop	r14
     b20:	08 95       	ret

00000b22 <readTemp>:
  // Conversion coefficients from SHT15 datasheet
  const float D1 = -40.0;  // for 14 Bit @ 5V
  const float D2 =   0.01; // for 14 Bit DEGC

  // Fetch raw value
  val = readTempRaw();
     b22:	e8 df       	rcall	.-48     	; 0xaf4 <readTempRaw>
     b24:	db d0       	rcall	.+438    	; 0xcdc <__fixsfsi>
     b26:	88 27       	eor	r24, r24
     b28:	77 fd       	sbrc	r23, 7
     b2a:	80 95       	com	r24
     b2c:	98 2f       	mov	r25, r24
     b2e:	09 d1       	rcall	.+530    	; 0xd42 <__floatsisf>
     b30:	2a e0       	ldi	r18, 0x0A	; 10
     b32:	37 ed       	ldi	r19, 0xD7	; 215
     b34:	43 e2       	ldi	r20, 0x23	; 35
     b36:	5c e3       	ldi	r21, 0x3C	; 60
     b38:	90 d1       	rcall	.+800    	; 0xe5a <__mulsf3>
     b3a:	20 e0       	ldi	r18, 0x00	; 0
     b3c:	30 e0       	ldi	r19, 0x00	; 0
     b3e:	40 e2       	ldi	r20, 0x20	; 32
     b40:	52 e4       	ldi	r21, 0x42	; 66
     b42:	67 d0       	rcall	.+206    	; 0xc12 <__subsf3>

  // Convert raw value to degrees Celsius
  temperature = (val * D2) + D1;

  return (temperature);
}
     b44:	08 95       	ret

00000b46 <readHum>:

float readHum(void)
{
     b46:	6f 92       	push	r6
     b48:	7f 92       	push	r7
     b4a:	8f 92       	push	r8
     b4c:	9f 92       	push	r9
     b4e:	af 92       	push	r10
     b50:	bf 92       	push	r11
     b52:	cf 92       	push	r12
     b54:	df 92       	push	r13
     b56:	ef 92       	push	r14
     b58:	ff 92       	push	r15
     b5a:	0f 93       	push	r16
     b5c:	1f 93       	push	r17

  // Command to send to the SHT1x to request humidity
  int _gHumidCmd = 0b00000101;

  // Fetch the value from the sensor
  sendCommandSHT(_gHumidCmd);
     b5e:	85 e0       	ldi	r24, 0x05	; 5
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	75 df       	rcall	.-278    	; 0xa4e <sendCommandSHT>
  waitForResultSHT();
     b64:	99 df       	rcall	.-206    	; 0xa98 <waitForResultSHT>
  val = getData16SHT();
     b66:	a8 df       	rcall	.-176    	; 0xab8 <getData16SHT>
     b68:	7c 01       	movw	r14, r24
  skipCrcSHT();
     b6a:	be df       	rcall	.-132    	; 0xae8 <skipCrcSHT>

  // Apply linear conversion to raw value
  linearHumidity = C1 + C2 * val + C3 * val * val;
     b6c:	00 27       	eor	r16, r16
     b6e:	f7 fc       	sbrc	r15, 7
     b70:	00 95       	com	r16
     b72:	10 2f       	mov	r17, r16
     b74:	c8 01       	movw	r24, r16
     b76:	b7 01       	movw	r22, r14
     b78:	e4 d0       	rcall	.+456    	; 0xd42 <__floatsisf>
     b7a:	7b 01       	movw	r14, r22
     b7c:	8c 01       	movw	r16, r24

  // Get current temperature for humidity correction
  temperature = readTemp();
     b7e:	d1 df       	rcall	.-94     	; 0xb22 <readTemp>
     b80:	20 e0       	ldi	r18, 0x00	; 0
     b82:	30 e0       	ldi	r19, 0x00	; 0
     b84:	48 ec       	ldi	r20, 0xC8	; 200
     b86:	51 e4       	ldi	r21, 0x41	; 65
     b88:	44 d0       	rcall	.+136    	; 0xc12 <__subsf3>
     b8a:	5b 01       	movw	r10, r22
     b8c:	6c 01       	movw	r12, r24
     b8e:	c8 01       	movw	r24, r16
     b90:	b7 01       	movw	r22, r14
     b92:	2c ea       	ldi	r18, 0xAC	; 172
     b94:	35 ec       	ldi	r19, 0xC5	; 197
     b96:	47 ea       	ldi	r20, 0xA7	; 167
     b98:	58 e3       	ldi	r21, 0x38	; 56
     b9a:	5f d1       	rcall	.+702    	; 0xe5a <__mulsf3>
     b9c:	2a e0       	ldi	r18, 0x0A	; 10
     b9e:	37 ed       	ldi	r19, 0xD7	; 215
     ba0:	43 e2       	ldi	r20, 0x23	; 35
     ba2:	5c e3       	ldi	r21, 0x3C	; 60
     ba4:	37 d0       	rcall	.+110    	; 0xc14 <__addsf3>
     ba6:	9b 01       	movw	r18, r22
     ba8:	ac 01       	movw	r20, r24
     baa:	c6 01       	movw	r24, r12
     bac:	b5 01       	movw	r22, r10
     bae:	55 d1       	rcall	.+682    	; 0xe5a <__mulsf3>
     bb0:	3b 01       	movw	r6, r22
     bb2:	4c 01       	movw	r8, r24
     bb4:	c8 01       	movw	r24, r16
     bb6:	b7 01       	movw	r22, r14
     bb8:	24 e5       	ldi	r18, 0x54	; 84
     bba:	33 ee       	ldi	r19, 0xE3	; 227
     bbc:	45 e2       	ldi	r20, 0x25	; 37
     bbe:	5d e3       	ldi	r21, 0x3D	; 61
     bc0:	4c d1       	rcall	.+664    	; 0xe5a <__mulsf3>
     bc2:	20 e0       	ldi	r18, 0x00	; 0
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	40 e8       	ldi	r20, 0x80	; 128
     bc8:	50 e4       	ldi	r21, 0x40	; 64
     bca:	23 d0       	rcall	.+70     	; 0xc12 <__subsf3>
     bcc:	5b 01       	movw	r10, r22
     bce:	6c 01       	movw	r12, r24
     bd0:	c8 01       	movw	r24, r16
     bd2:	b7 01       	movw	r22, r14
     bd4:	22 ea       	ldi	r18, 0xA2	; 162
     bd6:	37 ee       	ldi	r19, 0xE7	; 231
     bd8:	4b e3       	ldi	r20, 0x3B	; 59
     bda:	56 eb       	ldi	r21, 0xB6	; 182
     bdc:	3e d1       	rcall	.+636    	; 0xe5a <__mulsf3>
     bde:	a8 01       	movw	r20, r16
     be0:	97 01       	movw	r18, r14
     be2:	3b d1       	rcall	.+630    	; 0xe5a <__mulsf3>
     be4:	9b 01       	movw	r18, r22
     be6:	ac 01       	movw	r20, r24
     be8:	c6 01       	movw	r24, r12
     bea:	b5 01       	movw	r22, r10
     bec:	13 d0       	rcall	.+38     	; 0xc14 <__addsf3>
     bee:	9b 01       	movw	r18, r22
     bf0:	ac 01       	movw	r20, r24
     bf2:	c4 01       	movw	r24, r8
     bf4:	b3 01       	movw	r22, r6
     bf6:	0e d0       	rcall	.+28     	; 0xc14 <__addsf3>

  // Correct humidity value for current temperature
  correctedHumidity = (temperature - 25.0 ) * (T1 + T2 * val) + linearHumidity;

  return (correctedHumidity);
}
     bf8:	1f 91       	pop	r17
     bfa:	0f 91       	pop	r16
     bfc:	ff 90       	pop	r15
     bfe:	ef 90       	pop	r14
     c00:	df 90       	pop	r13
     c02:	cf 90       	pop	r12
     c04:	bf 90       	pop	r11
     c06:	af 90       	pop	r10
     c08:	9f 90       	pop	r9
     c0a:	8f 90       	pop	r8
     c0c:	7f 90       	pop	r7
     c0e:	6f 90       	pop	r6
     c10:	08 95       	ret

00000c12 <__subsf3>:
     c12:	50 58       	subi	r21, 0x80	; 128

00000c14 <__addsf3>:
     c14:	bb 27       	eor	r27, r27
     c16:	aa 27       	eor	r26, r26
     c18:	0e d0       	rcall	.+28     	; 0xc36 <__addsf3x>
     c1a:	e5 c0       	rjmp	.+458    	; 0xde6 <__fp_round>
     c1c:	d6 d0       	rcall	.+428    	; 0xdca <__fp_pscA>
     c1e:	30 f0       	brcs	.+12     	; 0xc2c <__addsf3+0x18>
     c20:	db d0       	rcall	.+438    	; 0xdd8 <__fp_pscB>
     c22:	20 f0       	brcs	.+8      	; 0xc2c <__addsf3+0x18>
     c24:	31 f4       	brne	.+12     	; 0xc32 <__addsf3+0x1e>
     c26:	9f 3f       	cpi	r25, 0xFF	; 255
     c28:	11 f4       	brne	.+4      	; 0xc2e <__addsf3+0x1a>
     c2a:	1e f4       	brtc	.+6      	; 0xc32 <__addsf3+0x1e>
     c2c:	cb c0       	rjmp	.+406    	; 0xdc4 <__fp_nan>
     c2e:	0e f4       	brtc	.+2      	; 0xc32 <__addsf3+0x1e>
     c30:	e0 95       	com	r30
     c32:	e7 fb       	bst	r30, 7
     c34:	c1 c0       	rjmp	.+386    	; 0xdb8 <__fp_inf>

00000c36 <__addsf3x>:
     c36:	e9 2f       	mov	r30, r25
     c38:	e7 d0       	rcall	.+462    	; 0xe08 <__fp_split3>
     c3a:	80 f3       	brcs	.-32     	; 0xc1c <__addsf3+0x8>
     c3c:	ba 17       	cp	r27, r26
     c3e:	62 07       	cpc	r22, r18
     c40:	73 07       	cpc	r23, r19
     c42:	84 07       	cpc	r24, r20
     c44:	95 07       	cpc	r25, r21
     c46:	18 f0       	brcs	.+6      	; 0xc4e <__addsf3x+0x18>
     c48:	71 f4       	brne	.+28     	; 0xc66 <__addsf3x+0x30>
     c4a:	9e f5       	brtc	.+102    	; 0xcb2 <__addsf3x+0x7c>
     c4c:	ff c0       	rjmp	.+510    	; 0xe4c <__fp_zero>
     c4e:	0e f4       	brtc	.+2      	; 0xc52 <__addsf3x+0x1c>
     c50:	e0 95       	com	r30
     c52:	0b 2e       	mov	r0, r27
     c54:	ba 2f       	mov	r27, r26
     c56:	a0 2d       	mov	r26, r0
     c58:	0b 01       	movw	r0, r22
     c5a:	b9 01       	movw	r22, r18
     c5c:	90 01       	movw	r18, r0
     c5e:	0c 01       	movw	r0, r24
     c60:	ca 01       	movw	r24, r20
     c62:	a0 01       	movw	r20, r0
     c64:	11 24       	eor	r1, r1
     c66:	ff 27       	eor	r31, r31
     c68:	59 1b       	sub	r21, r25
     c6a:	99 f0       	breq	.+38     	; 0xc92 <__addsf3x+0x5c>
     c6c:	59 3f       	cpi	r21, 0xF9	; 249
     c6e:	50 f4       	brcc	.+20     	; 0xc84 <__addsf3x+0x4e>
     c70:	50 3e       	cpi	r21, 0xE0	; 224
     c72:	68 f1       	brcs	.+90     	; 0xcce <__addsf3x+0x98>
     c74:	1a 16       	cp	r1, r26
     c76:	f0 40       	sbci	r31, 0x00	; 0
     c78:	a2 2f       	mov	r26, r18
     c7a:	23 2f       	mov	r18, r19
     c7c:	34 2f       	mov	r19, r20
     c7e:	44 27       	eor	r20, r20
     c80:	58 5f       	subi	r21, 0xF8	; 248
     c82:	f3 cf       	rjmp	.-26     	; 0xc6a <__addsf3x+0x34>
     c84:	46 95       	lsr	r20
     c86:	37 95       	ror	r19
     c88:	27 95       	ror	r18
     c8a:	a7 95       	ror	r26
     c8c:	f0 40       	sbci	r31, 0x00	; 0
     c8e:	53 95       	inc	r21
     c90:	c9 f7       	brne	.-14     	; 0xc84 <__addsf3x+0x4e>
     c92:	7e f4       	brtc	.+30     	; 0xcb2 <__addsf3x+0x7c>
     c94:	1f 16       	cp	r1, r31
     c96:	ba 0b       	sbc	r27, r26
     c98:	62 0b       	sbc	r22, r18
     c9a:	73 0b       	sbc	r23, r19
     c9c:	84 0b       	sbc	r24, r20
     c9e:	ba f0       	brmi	.+46     	; 0xcce <__addsf3x+0x98>
     ca0:	91 50       	subi	r25, 0x01	; 1
     ca2:	a1 f0       	breq	.+40     	; 0xccc <__addsf3x+0x96>
     ca4:	ff 0f       	add	r31, r31
     ca6:	bb 1f       	adc	r27, r27
     ca8:	66 1f       	adc	r22, r22
     caa:	77 1f       	adc	r23, r23
     cac:	88 1f       	adc	r24, r24
     cae:	c2 f7       	brpl	.-16     	; 0xca0 <__addsf3x+0x6a>
     cb0:	0e c0       	rjmp	.+28     	; 0xcce <__addsf3x+0x98>
     cb2:	ba 0f       	add	r27, r26
     cb4:	62 1f       	adc	r22, r18
     cb6:	73 1f       	adc	r23, r19
     cb8:	84 1f       	adc	r24, r20
     cba:	48 f4       	brcc	.+18     	; 0xcce <__addsf3x+0x98>
     cbc:	87 95       	ror	r24
     cbe:	77 95       	ror	r23
     cc0:	67 95       	ror	r22
     cc2:	b7 95       	ror	r27
     cc4:	f7 95       	ror	r31
     cc6:	9e 3f       	cpi	r25, 0xFE	; 254
     cc8:	08 f0       	brcs	.+2      	; 0xccc <__addsf3x+0x96>
     cca:	b3 cf       	rjmp	.-154    	; 0xc32 <__addsf3+0x1e>
     ccc:	93 95       	inc	r25
     cce:	88 0f       	add	r24, r24
     cd0:	08 f0       	brcs	.+2      	; 0xcd4 <__addsf3x+0x9e>
     cd2:	99 27       	eor	r25, r25
     cd4:	ee 0f       	add	r30, r30
     cd6:	97 95       	ror	r25
     cd8:	87 95       	ror	r24
     cda:	08 95       	ret

00000cdc <__fixsfsi>:
     cdc:	04 d0       	rcall	.+8      	; 0xce6 <__fixunssfsi>
     cde:	68 94       	set
     ce0:	b1 11       	cpse	r27, r1
     ce2:	b5 c0       	rjmp	.+362    	; 0xe4e <__fp_szero>
     ce4:	08 95       	ret

00000ce6 <__fixunssfsi>:
     ce6:	98 d0       	rcall	.+304    	; 0xe18 <__fp_splitA>
     ce8:	88 f0       	brcs	.+34     	; 0xd0c <__fixunssfsi+0x26>
     cea:	9f 57       	subi	r25, 0x7F	; 127
     cec:	90 f0       	brcs	.+36     	; 0xd12 <__fixunssfsi+0x2c>
     cee:	b9 2f       	mov	r27, r25
     cf0:	99 27       	eor	r25, r25
     cf2:	b7 51       	subi	r27, 0x17	; 23
     cf4:	a0 f0       	brcs	.+40     	; 0xd1e <__fixunssfsi+0x38>
     cf6:	d1 f0       	breq	.+52     	; 0xd2c <__fixunssfsi+0x46>
     cf8:	66 0f       	add	r22, r22
     cfa:	77 1f       	adc	r23, r23
     cfc:	88 1f       	adc	r24, r24
     cfe:	99 1f       	adc	r25, r25
     d00:	1a f0       	brmi	.+6      	; 0xd08 <__fixunssfsi+0x22>
     d02:	ba 95       	dec	r27
     d04:	c9 f7       	brne	.-14     	; 0xcf8 <__fixunssfsi+0x12>
     d06:	12 c0       	rjmp	.+36     	; 0xd2c <__fixunssfsi+0x46>
     d08:	b1 30       	cpi	r27, 0x01	; 1
     d0a:	81 f0       	breq	.+32     	; 0xd2c <__fixunssfsi+0x46>
     d0c:	9f d0       	rcall	.+318    	; 0xe4c <__fp_zero>
     d0e:	b1 e0       	ldi	r27, 0x01	; 1
     d10:	08 95       	ret
     d12:	9c c0       	rjmp	.+312    	; 0xe4c <__fp_zero>
     d14:	67 2f       	mov	r22, r23
     d16:	78 2f       	mov	r23, r24
     d18:	88 27       	eor	r24, r24
     d1a:	b8 5f       	subi	r27, 0xF8	; 248
     d1c:	39 f0       	breq	.+14     	; 0xd2c <__fixunssfsi+0x46>
     d1e:	b9 3f       	cpi	r27, 0xF9	; 249
     d20:	cc f3       	brlt	.-14     	; 0xd14 <__fixunssfsi+0x2e>
     d22:	86 95       	lsr	r24
     d24:	77 95       	ror	r23
     d26:	67 95       	ror	r22
     d28:	b3 95       	inc	r27
     d2a:	d9 f7       	brne	.-10     	; 0xd22 <__fixunssfsi+0x3c>
     d2c:	3e f4       	brtc	.+14     	; 0xd3c <__fixunssfsi+0x56>
     d2e:	90 95       	com	r25
     d30:	80 95       	com	r24
     d32:	70 95       	com	r23
     d34:	61 95       	neg	r22
     d36:	7f 4f       	sbci	r23, 0xFF	; 255
     d38:	8f 4f       	sbci	r24, 0xFF	; 255
     d3a:	9f 4f       	sbci	r25, 0xFF	; 255
     d3c:	08 95       	ret

00000d3e <__floatunsisf>:
     d3e:	e8 94       	clt
     d40:	09 c0       	rjmp	.+18     	; 0xd54 <__floatsisf+0x12>

00000d42 <__floatsisf>:
     d42:	97 fb       	bst	r25, 7
     d44:	3e f4       	brtc	.+14     	; 0xd54 <__floatsisf+0x12>
     d46:	90 95       	com	r25
     d48:	80 95       	com	r24
     d4a:	70 95       	com	r23
     d4c:	61 95       	neg	r22
     d4e:	7f 4f       	sbci	r23, 0xFF	; 255
     d50:	8f 4f       	sbci	r24, 0xFF	; 255
     d52:	9f 4f       	sbci	r25, 0xFF	; 255
     d54:	99 23       	and	r25, r25
     d56:	a9 f0       	breq	.+42     	; 0xd82 <__floatsisf+0x40>
     d58:	f9 2f       	mov	r31, r25
     d5a:	96 e9       	ldi	r25, 0x96	; 150
     d5c:	bb 27       	eor	r27, r27
     d5e:	93 95       	inc	r25
     d60:	f6 95       	lsr	r31
     d62:	87 95       	ror	r24
     d64:	77 95       	ror	r23
     d66:	67 95       	ror	r22
     d68:	b7 95       	ror	r27
     d6a:	f1 11       	cpse	r31, r1
     d6c:	f8 cf       	rjmp	.-16     	; 0xd5e <__floatsisf+0x1c>
     d6e:	fa f4       	brpl	.+62     	; 0xdae <__floatsisf+0x6c>
     d70:	bb 0f       	add	r27, r27
     d72:	11 f4       	brne	.+4      	; 0xd78 <__floatsisf+0x36>
     d74:	60 ff       	sbrs	r22, 0
     d76:	1b c0       	rjmp	.+54     	; 0xdae <__floatsisf+0x6c>
     d78:	6f 5f       	subi	r22, 0xFF	; 255
     d7a:	7f 4f       	sbci	r23, 0xFF	; 255
     d7c:	8f 4f       	sbci	r24, 0xFF	; 255
     d7e:	9f 4f       	sbci	r25, 0xFF	; 255
     d80:	16 c0       	rjmp	.+44     	; 0xdae <__floatsisf+0x6c>
     d82:	88 23       	and	r24, r24
     d84:	11 f0       	breq	.+4      	; 0xd8a <__floatsisf+0x48>
     d86:	96 e9       	ldi	r25, 0x96	; 150
     d88:	11 c0       	rjmp	.+34     	; 0xdac <__floatsisf+0x6a>
     d8a:	77 23       	and	r23, r23
     d8c:	21 f0       	breq	.+8      	; 0xd96 <__floatsisf+0x54>
     d8e:	9e e8       	ldi	r25, 0x8E	; 142
     d90:	87 2f       	mov	r24, r23
     d92:	76 2f       	mov	r23, r22
     d94:	05 c0       	rjmp	.+10     	; 0xda0 <__floatsisf+0x5e>
     d96:	66 23       	and	r22, r22
     d98:	71 f0       	breq	.+28     	; 0xdb6 <__floatsisf+0x74>
     d9a:	96 e8       	ldi	r25, 0x86	; 134
     d9c:	86 2f       	mov	r24, r22
     d9e:	70 e0       	ldi	r23, 0x00	; 0
     da0:	60 e0       	ldi	r22, 0x00	; 0
     da2:	2a f0       	brmi	.+10     	; 0xdae <__floatsisf+0x6c>
     da4:	9a 95       	dec	r25
     da6:	66 0f       	add	r22, r22
     da8:	77 1f       	adc	r23, r23
     daa:	88 1f       	adc	r24, r24
     dac:	da f7       	brpl	.-10     	; 0xda4 <__floatsisf+0x62>
     dae:	88 0f       	add	r24, r24
     db0:	96 95       	lsr	r25
     db2:	87 95       	ror	r24
     db4:	97 f9       	bld	r25, 7
     db6:	08 95       	ret

00000db8 <__fp_inf>:
     db8:	97 f9       	bld	r25, 7
     dba:	9f 67       	ori	r25, 0x7F	; 127
     dbc:	80 e8       	ldi	r24, 0x80	; 128
     dbe:	70 e0       	ldi	r23, 0x00	; 0
     dc0:	60 e0       	ldi	r22, 0x00	; 0
     dc2:	08 95       	ret

00000dc4 <__fp_nan>:
     dc4:	9f ef       	ldi	r25, 0xFF	; 255
     dc6:	80 ec       	ldi	r24, 0xC0	; 192
     dc8:	08 95       	ret

00000dca <__fp_pscA>:
     dca:	00 24       	eor	r0, r0
     dcc:	0a 94       	dec	r0
     dce:	16 16       	cp	r1, r22
     dd0:	17 06       	cpc	r1, r23
     dd2:	18 06       	cpc	r1, r24
     dd4:	09 06       	cpc	r0, r25
     dd6:	08 95       	ret

00000dd8 <__fp_pscB>:
     dd8:	00 24       	eor	r0, r0
     dda:	0a 94       	dec	r0
     ddc:	12 16       	cp	r1, r18
     dde:	13 06       	cpc	r1, r19
     de0:	14 06       	cpc	r1, r20
     de2:	05 06       	cpc	r0, r21
     de4:	08 95       	ret

00000de6 <__fp_round>:
     de6:	09 2e       	mov	r0, r25
     de8:	03 94       	inc	r0
     dea:	00 0c       	add	r0, r0
     dec:	11 f4       	brne	.+4      	; 0xdf2 <__fp_round+0xc>
     dee:	88 23       	and	r24, r24
     df0:	52 f0       	brmi	.+20     	; 0xe06 <__fp_round+0x20>
     df2:	bb 0f       	add	r27, r27
     df4:	40 f4       	brcc	.+16     	; 0xe06 <__fp_round+0x20>
     df6:	bf 2b       	or	r27, r31
     df8:	11 f4       	brne	.+4      	; 0xdfe <__fp_round+0x18>
     dfa:	60 ff       	sbrs	r22, 0
     dfc:	04 c0       	rjmp	.+8      	; 0xe06 <__fp_round+0x20>
     dfe:	6f 5f       	subi	r22, 0xFF	; 255
     e00:	7f 4f       	sbci	r23, 0xFF	; 255
     e02:	8f 4f       	sbci	r24, 0xFF	; 255
     e04:	9f 4f       	sbci	r25, 0xFF	; 255
     e06:	08 95       	ret

00000e08 <__fp_split3>:
     e08:	57 fd       	sbrc	r21, 7
     e0a:	90 58       	subi	r25, 0x80	; 128
     e0c:	44 0f       	add	r20, r20
     e0e:	55 1f       	adc	r21, r21
     e10:	59 f0       	breq	.+22     	; 0xe28 <__fp_splitA+0x10>
     e12:	5f 3f       	cpi	r21, 0xFF	; 255
     e14:	71 f0       	breq	.+28     	; 0xe32 <__fp_splitA+0x1a>
     e16:	47 95       	ror	r20

00000e18 <__fp_splitA>:
     e18:	88 0f       	add	r24, r24
     e1a:	97 fb       	bst	r25, 7
     e1c:	99 1f       	adc	r25, r25
     e1e:	61 f0       	breq	.+24     	; 0xe38 <__fp_splitA+0x20>
     e20:	9f 3f       	cpi	r25, 0xFF	; 255
     e22:	79 f0       	breq	.+30     	; 0xe42 <__fp_splitA+0x2a>
     e24:	87 95       	ror	r24
     e26:	08 95       	ret
     e28:	12 16       	cp	r1, r18
     e2a:	13 06       	cpc	r1, r19
     e2c:	14 06       	cpc	r1, r20
     e2e:	55 1f       	adc	r21, r21
     e30:	f2 cf       	rjmp	.-28     	; 0xe16 <__fp_split3+0xe>
     e32:	46 95       	lsr	r20
     e34:	f1 df       	rcall	.-30     	; 0xe18 <__fp_splitA>
     e36:	08 c0       	rjmp	.+16     	; 0xe48 <__fp_splitA+0x30>
     e38:	16 16       	cp	r1, r22
     e3a:	17 06       	cpc	r1, r23
     e3c:	18 06       	cpc	r1, r24
     e3e:	99 1f       	adc	r25, r25
     e40:	f1 cf       	rjmp	.-30     	; 0xe24 <__fp_splitA+0xc>
     e42:	86 95       	lsr	r24
     e44:	71 05       	cpc	r23, r1
     e46:	61 05       	cpc	r22, r1
     e48:	08 94       	sec
     e4a:	08 95       	ret

00000e4c <__fp_zero>:
     e4c:	e8 94       	clt

00000e4e <__fp_szero>:
     e4e:	bb 27       	eor	r27, r27
     e50:	66 27       	eor	r22, r22
     e52:	77 27       	eor	r23, r23
     e54:	cb 01       	movw	r24, r22
     e56:	97 f9       	bld	r25, 7
     e58:	08 95       	ret

00000e5a <__mulsf3>:
     e5a:	0b d0       	rcall	.+22     	; 0xe72 <__mulsf3x>
     e5c:	c4 cf       	rjmp	.-120    	; 0xde6 <__fp_round>
     e5e:	b5 df       	rcall	.-150    	; 0xdca <__fp_pscA>
     e60:	28 f0       	brcs	.+10     	; 0xe6c <__mulsf3+0x12>
     e62:	ba df       	rcall	.-140    	; 0xdd8 <__fp_pscB>
     e64:	18 f0       	brcs	.+6      	; 0xe6c <__mulsf3+0x12>
     e66:	95 23       	and	r25, r21
     e68:	09 f0       	breq	.+2      	; 0xe6c <__mulsf3+0x12>
     e6a:	a6 cf       	rjmp	.-180    	; 0xdb8 <__fp_inf>
     e6c:	ab cf       	rjmp	.-170    	; 0xdc4 <__fp_nan>
     e6e:	11 24       	eor	r1, r1
     e70:	ee cf       	rjmp	.-36     	; 0xe4e <__fp_szero>

00000e72 <__mulsf3x>:
     e72:	ca df       	rcall	.-108    	; 0xe08 <__fp_split3>
     e74:	a0 f3       	brcs	.-24     	; 0xe5e <__mulsf3+0x4>

00000e76 <__mulsf3_pse>:
     e76:	95 9f       	mul	r25, r21
     e78:	d1 f3       	breq	.-12     	; 0xe6e <__mulsf3+0x14>
     e7a:	95 0f       	add	r25, r21
     e7c:	50 e0       	ldi	r21, 0x00	; 0
     e7e:	55 1f       	adc	r21, r21
     e80:	62 9f       	mul	r22, r18
     e82:	f0 01       	movw	r30, r0
     e84:	72 9f       	mul	r23, r18
     e86:	bb 27       	eor	r27, r27
     e88:	f0 0d       	add	r31, r0
     e8a:	b1 1d       	adc	r27, r1
     e8c:	63 9f       	mul	r22, r19
     e8e:	aa 27       	eor	r26, r26
     e90:	f0 0d       	add	r31, r0
     e92:	b1 1d       	adc	r27, r1
     e94:	aa 1f       	adc	r26, r26
     e96:	64 9f       	mul	r22, r20
     e98:	66 27       	eor	r22, r22
     e9a:	b0 0d       	add	r27, r0
     e9c:	a1 1d       	adc	r26, r1
     e9e:	66 1f       	adc	r22, r22
     ea0:	82 9f       	mul	r24, r18
     ea2:	22 27       	eor	r18, r18
     ea4:	b0 0d       	add	r27, r0
     ea6:	a1 1d       	adc	r26, r1
     ea8:	62 1f       	adc	r22, r18
     eaa:	73 9f       	mul	r23, r19
     eac:	b0 0d       	add	r27, r0
     eae:	a1 1d       	adc	r26, r1
     eb0:	62 1f       	adc	r22, r18
     eb2:	83 9f       	mul	r24, r19
     eb4:	a0 0d       	add	r26, r0
     eb6:	61 1d       	adc	r22, r1
     eb8:	22 1f       	adc	r18, r18
     eba:	74 9f       	mul	r23, r20
     ebc:	33 27       	eor	r19, r19
     ebe:	a0 0d       	add	r26, r0
     ec0:	61 1d       	adc	r22, r1
     ec2:	23 1f       	adc	r18, r19
     ec4:	84 9f       	mul	r24, r20
     ec6:	60 0d       	add	r22, r0
     ec8:	21 1d       	adc	r18, r1
     eca:	82 2f       	mov	r24, r18
     ecc:	76 2f       	mov	r23, r22
     ece:	6a 2f       	mov	r22, r26
     ed0:	11 24       	eor	r1, r1
     ed2:	9f 57       	subi	r25, 0x7F	; 127
     ed4:	50 40       	sbci	r21, 0x00	; 0
     ed6:	8a f0       	brmi	.+34     	; 0xefa <__mulsf3_pse+0x84>
     ed8:	e1 f0       	breq	.+56     	; 0xf12 <__mulsf3_pse+0x9c>
     eda:	88 23       	and	r24, r24
     edc:	4a f0       	brmi	.+18     	; 0xef0 <__mulsf3_pse+0x7a>
     ede:	ee 0f       	add	r30, r30
     ee0:	ff 1f       	adc	r31, r31
     ee2:	bb 1f       	adc	r27, r27
     ee4:	66 1f       	adc	r22, r22
     ee6:	77 1f       	adc	r23, r23
     ee8:	88 1f       	adc	r24, r24
     eea:	91 50       	subi	r25, 0x01	; 1
     eec:	50 40       	sbci	r21, 0x00	; 0
     eee:	a9 f7       	brne	.-22     	; 0xeda <__mulsf3_pse+0x64>
     ef0:	9e 3f       	cpi	r25, 0xFE	; 254
     ef2:	51 05       	cpc	r21, r1
     ef4:	70 f0       	brcs	.+28     	; 0xf12 <__mulsf3_pse+0x9c>
     ef6:	60 cf       	rjmp	.-320    	; 0xdb8 <__fp_inf>
     ef8:	aa cf       	rjmp	.-172    	; 0xe4e <__fp_szero>
     efa:	5f 3f       	cpi	r21, 0xFF	; 255
     efc:	ec f3       	brlt	.-6      	; 0xef8 <__mulsf3_pse+0x82>
     efe:	98 3e       	cpi	r25, 0xE8	; 232
     f00:	dc f3       	brlt	.-10     	; 0xef8 <__mulsf3_pse+0x82>
     f02:	86 95       	lsr	r24
     f04:	77 95       	ror	r23
     f06:	67 95       	ror	r22
     f08:	b7 95       	ror	r27
     f0a:	f7 95       	ror	r31
     f0c:	e7 95       	ror	r30
     f0e:	9f 5f       	subi	r25, 0xFF	; 255
     f10:	c1 f7       	brne	.-16     	; 0xf02 <__mulsf3_pse+0x8c>
     f12:	fe 2b       	or	r31, r30
     f14:	88 0f       	add	r24, r24
     f16:	91 1d       	adc	r25, r1
     f18:	96 95       	lsr	r25
     f1a:	87 95       	ror	r24
     f1c:	97 f9       	bld	r25, 7
     f1e:	08 95       	ret

00000f20 <__divmodhi4>:
     f20:	97 fb       	bst	r25, 7
     f22:	09 2e       	mov	r0, r25
     f24:	07 26       	eor	r0, r23
     f26:	0a d0       	rcall	.+20     	; 0xf3c <__divmodhi4_neg1>
     f28:	77 fd       	sbrc	r23, 7
     f2a:	04 d0       	rcall	.+8      	; 0xf34 <__divmodhi4_neg2>
     f2c:	0c d0       	rcall	.+24     	; 0xf46 <__udivmodhi4>
     f2e:	06 d0       	rcall	.+12     	; 0xf3c <__divmodhi4_neg1>
     f30:	00 20       	and	r0, r0
     f32:	1a f4       	brpl	.+6      	; 0xf3a <__divmodhi4_exit>

00000f34 <__divmodhi4_neg2>:
     f34:	70 95       	com	r23
     f36:	61 95       	neg	r22
     f38:	7f 4f       	sbci	r23, 0xFF	; 255

00000f3a <__divmodhi4_exit>:
     f3a:	08 95       	ret

00000f3c <__divmodhi4_neg1>:
     f3c:	f6 f7       	brtc	.-4      	; 0xf3a <__divmodhi4_exit>
     f3e:	90 95       	com	r25
     f40:	81 95       	neg	r24
     f42:	9f 4f       	sbci	r25, 0xFF	; 255
     f44:	08 95       	ret

00000f46 <__udivmodhi4>:
     f46:	aa 1b       	sub	r26, r26
     f48:	bb 1b       	sub	r27, r27
     f4a:	51 e1       	ldi	r21, 0x11	; 17
     f4c:	07 c0       	rjmp	.+14     	; 0xf5c <__udivmodhi4_ep>

00000f4e <__udivmodhi4_loop>:
     f4e:	aa 1f       	adc	r26, r26
     f50:	bb 1f       	adc	r27, r27
     f52:	a6 17       	cp	r26, r22
     f54:	b7 07       	cpc	r27, r23
     f56:	10 f0       	brcs	.+4      	; 0xf5c <__udivmodhi4_ep>
     f58:	a6 1b       	sub	r26, r22
     f5a:	b7 0b       	sbc	r27, r23

00000f5c <__udivmodhi4_ep>:
     f5c:	88 1f       	adc	r24, r24
     f5e:	99 1f       	adc	r25, r25
     f60:	5a 95       	dec	r21
     f62:	a9 f7       	brne	.-22     	; 0xf4e <__udivmodhi4_loop>
     f64:	80 95       	com	r24
     f66:	90 95       	com	r25
     f68:	bc 01       	movw	r22, r24
     f6a:	cd 01       	movw	r24, r26
     f6c:	08 95       	ret

00000f6e <strcat>:
     f6e:	fb 01       	movw	r30, r22
     f70:	dc 01       	movw	r26, r24
     f72:	0d 90       	ld	r0, X+
     f74:	00 20       	and	r0, r0
     f76:	e9 f7       	brne	.-6      	; 0xf72 <strcat+0x4>
     f78:	11 97       	sbiw	r26, 0x01	; 1
     f7a:	01 90       	ld	r0, Z+
     f7c:	0d 92       	st	X+, r0
     f7e:	00 20       	and	r0, r0
     f80:	e1 f7       	brne	.-8      	; 0xf7a <strcat+0xc>
     f82:	08 95       	ret

00000f84 <strcpy>:
     f84:	fb 01       	movw	r30, r22
     f86:	dc 01       	movw	r26, r24
     f88:	01 90       	ld	r0, Z+
     f8a:	0d 92       	st	X+, r0
     f8c:	00 20       	and	r0, r0
     f8e:	e1 f7       	brne	.-8      	; 0xf88 <strcpy+0x4>
     f90:	08 95       	ret

00000f92 <strstr>:
     f92:	fb 01       	movw	r30, r22
     f94:	51 91       	ld	r21, Z+
     f96:	55 23       	and	r21, r21
     f98:	a9 f0       	breq	.+42     	; 0xfc4 <strstr+0x32>
     f9a:	bf 01       	movw	r22, r30
     f9c:	dc 01       	movw	r26, r24
     f9e:	4d 91       	ld	r20, X+
     fa0:	45 17       	cp	r20, r21
     fa2:	41 11       	cpse	r20, r1
     fa4:	e1 f7       	brne	.-8      	; 0xf9e <strstr+0xc>
     fa6:	59 f4       	brne	.+22     	; 0xfbe <strstr+0x2c>
     fa8:	cd 01       	movw	r24, r26
     faa:	01 90       	ld	r0, Z+
     fac:	00 20       	and	r0, r0
     fae:	49 f0       	breq	.+18     	; 0xfc2 <strstr+0x30>
     fb0:	4d 91       	ld	r20, X+
     fb2:	40 15       	cp	r20, r0
     fb4:	41 11       	cpse	r20, r1
     fb6:	c9 f3       	breq	.-14     	; 0xfaa <strstr+0x18>
     fb8:	fb 01       	movw	r30, r22
     fba:	41 11       	cpse	r20, r1
     fbc:	ef cf       	rjmp	.-34     	; 0xf9c <strstr+0xa>
     fbe:	81 e0       	ldi	r24, 0x01	; 1
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	01 97       	sbiw	r24, 0x01	; 1
     fc4:	08 95       	ret

00000fc6 <itoa>:
     fc6:	fb 01       	movw	r30, r22
     fc8:	9f 01       	movw	r18, r30
     fca:	e8 94       	clt
     fcc:	42 30       	cpi	r20, 0x02	; 2
     fce:	bc f0       	brlt	.+46     	; 0xffe <itoa+0x38>
     fd0:	45 32       	cpi	r20, 0x25	; 37
     fd2:	ac f4       	brge	.+42     	; 0xffe <itoa+0x38>
     fd4:	4a 30       	cpi	r20, 0x0A	; 10
     fd6:	29 f4       	brne	.+10     	; 0xfe2 <itoa+0x1c>
     fd8:	97 fb       	bst	r25, 7
     fda:	1e f4       	brtc	.+6      	; 0xfe2 <itoa+0x1c>
     fdc:	90 95       	com	r25
     fde:	81 95       	neg	r24
     fe0:	9f 4f       	sbci	r25, 0xFF	; 255
     fe2:	64 2f       	mov	r22, r20
     fe4:	77 27       	eor	r23, r23
     fe6:	af df       	rcall	.-162    	; 0xf46 <__udivmodhi4>
     fe8:	80 5d       	subi	r24, 0xD0	; 208
     fea:	8a 33       	cpi	r24, 0x3A	; 58
     fec:	0c f0       	brlt	.+2      	; 0xff0 <itoa+0x2a>
     fee:	89 5d       	subi	r24, 0xD9	; 217
     ff0:	81 93       	st	Z+, r24
     ff2:	cb 01       	movw	r24, r22
     ff4:	00 97       	sbiw	r24, 0x00	; 0
     ff6:	a9 f7       	brne	.-22     	; 0xfe2 <itoa+0x1c>
     ff8:	16 f4       	brtc	.+4      	; 0xffe <itoa+0x38>
     ffa:	5d e2       	ldi	r21, 0x2D	; 45
     ffc:	51 93       	st	Z+, r21
     ffe:	10 82       	st	Z, r1
    1000:	c9 01       	movw	r24, r18
    1002:	15 c0       	rjmp	.+42     	; 0x102e <strrev>

00001004 <__eerd_byte_m8>:
    1004:	e1 99       	sbic	0x1c, 1	; 28
    1006:	fe cf       	rjmp	.-4      	; 0x1004 <__eerd_byte_m8>
    1008:	9f bb       	out	0x1f, r25	; 31
    100a:	8e bb       	out	0x1e, r24	; 30
    100c:	e0 9a       	sbi	0x1c, 0	; 28
    100e:	99 27       	eor	r25, r25
    1010:	8d b3       	in	r24, 0x1d	; 29
    1012:	08 95       	ret

00001014 <__eewr_byte_m8>:
    1014:	26 2f       	mov	r18, r22

00001016 <__eewr_r18_m8>:
    1016:	e1 99       	sbic	0x1c, 1	; 28
    1018:	fe cf       	rjmp	.-4      	; 0x1016 <__eewr_r18_m8>
    101a:	9f bb       	out	0x1f, r25	; 31
    101c:	8e bb       	out	0x1e, r24	; 30
    101e:	2d bb       	out	0x1d, r18	; 29
    1020:	0f b6       	in	r0, 0x3f	; 63
    1022:	f8 94       	cli
    1024:	e2 9a       	sbi	0x1c, 2	; 28
    1026:	e1 9a       	sbi	0x1c, 1	; 28
    1028:	0f be       	out	0x3f, r0	; 63
    102a:	01 96       	adiw	r24, 0x01	; 1
    102c:	08 95       	ret

0000102e <strrev>:
    102e:	dc 01       	movw	r26, r24
    1030:	fc 01       	movw	r30, r24
    1032:	67 2f       	mov	r22, r23
    1034:	71 91       	ld	r23, Z+
    1036:	77 23       	and	r23, r23
    1038:	e1 f7       	brne	.-8      	; 0x1032 <strrev+0x4>
    103a:	32 97       	sbiw	r30, 0x02	; 2
    103c:	04 c0       	rjmp	.+8      	; 0x1046 <strrev+0x18>
    103e:	7c 91       	ld	r23, X
    1040:	6d 93       	st	X+, r22
    1042:	70 83       	st	Z, r23
    1044:	62 91       	ld	r22, -Z
    1046:	ae 17       	cp	r26, r30
    1048:	bf 07       	cpc	r27, r31
    104a:	c8 f3       	brcs	.-14     	; 0x103e <strrev+0x10>
    104c:	08 95       	ret

0000104e <_exit>:
    104e:	f8 94       	cli

00001050 <__stop_program>:
    1050:	ff cf       	rjmp	.-2      	; 0x1050 <__stop_program>
